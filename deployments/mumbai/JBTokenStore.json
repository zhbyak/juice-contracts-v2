{
  "address": "0x8344CF3467aAD71852c278B7A219Ed677A1Cd960",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IJBOperatorStore",
          "name": "_operatorStore",
          "type": "address"
        },
        {
          "internalType": "contract IJBProjects",
          "name": "_projects",
          "type": "address"
        },
        {
          "internalType": "contract IJBDirectory",
          "name": "_directory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CANT_REMOVE_TOKEN_IF_ITS_REQUIRED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CONTROLLER_UNAUTHORIZED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EMPTY_NAME",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EMPTY_SYMBOL",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INSUFFICIENT_FUNDS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INSUFFICIENT_UNCLAIMED_TOKENS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PROJECT_ALREADY_HAS_TOKEN",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RECIPIENT_ZERO_ADDRESS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TOKENS_MUST_HAVE_18_DECIMALS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TOKEN_ALREADY_IN_USE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TOKEN_NOT_FOUND",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UNAUTHORIZED",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialUnclaimedBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialClaimedBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "preferClaimedTokens",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IJBToken",
          "name": "newToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IJBToken",
          "name": "oldToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Change",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialUnclaimedBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IJBToken",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Issue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "tokensWereClaimed",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "preferClaimedTokens",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "flag",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "ShouldRequireClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_preferClaimedTokens",
          "type": "bool"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "contract IJBToken",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "changeFor",
      "outputs": [
        {
          "internalType": "contract IJBToken",
          "name": "oldToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "claimFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "directory",
      "outputs": [
        {
          "internalType": "contract IJBDirectory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "issueFor",
      "outputs": [
        {
          "internalType": "contract IJBToken",
          "name": "token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_preferClaimedTokens",
          "type": "bool"
        }
      ],
      "name": "mintFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operatorStore",
      "outputs": [
        {
          "internalType": "contract IJBOperatorStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IJBToken",
          "name": "",
          "type": "address"
        }
      ],
      "name": "projectOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projects",
      "outputs": [
        {
          "internalType": "contract IJBProjects",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requireClaimFor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_flag",
          "type": "bool"
        }
      ],
      "name": "shouldRequireClaimingFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenOf",
      "outputs": [
        {
          "internalType": "contract IJBToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "totalSupplyOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "unclaimedBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "unclaimedTotalSupplyOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x26654a5a41cfa6136b7631ab03c19427217da77dea59d37a700f0fac65198e36",
  "receipt": {
    "to": null,
    "from": "0x95C54D662c31672b2E9C572959AcF93cc883a0A5",
    "contractAddress": "0x8344CF3467aAD71852c278B7A219Ed677A1Cd960",
    "transactionIndex": 4,
    "gasUsed": "3189148",
    "logsBloom": "0x
    "blockHash": "0xb2bb373fcf38230c906fb4e444e042476c892bb1799f676920c9c6c1fcd14fdf",
    "transactionHash": "0x26654a5a41cfa6136b7631ab03c19427217da77dea59d37a700f0fac65198e36",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 25943211,
        "transactionHash": "0x26654a5a41cfa6136b7631ab03c19427217da77dea59d37a700f0fac65198e36",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000095c54d662c31672b2e9c572959acf93cc883a0a5",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000e29a439cf5f960000000000000000000000000000000000000000000000000068d3453b0fbec000000000000000000000000000000000000000000000010e2994760b0acecc92a00000000000000000000000000000000000000000000000005aa9a101405f2a00000000000000000000000000000000000000000000010e29a29faf449e2c28a",
        "logIndex": 106,
        "blockHash": "0xb2bb373fcf38230c906fb4e444e042476c892bb1799f676920c9c6c1fcd14fdf"
      }
    ],
    "blockNumber": 25943211,
    "cumulativeGasUsed": "4493650",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x71B14806AB6452B756267c1cB18fe51B151F47b6",
    "0xe135De15f225A2EA008E0Ca43b2E70BC0302ad90",
    "0x7428Daec6607fE305eb696D6B2A4aA43D347e258"
  ],
  "numDeployments": 2,
  "solcInputHash": "0853e5436dac57bfc322d11177fa8b4d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IJBOperatorStore\",\"name\":\"_operatorStore\",\"type\":\"address\"},{\"internalType\":\"contract IJBProjects\",\"name\":\"_projects\",\"type\":\"address\"},{\"internalType\":\"contract IJBDirectory\",\"name\":\"_directory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CANT_REMOVE_TOKEN_IF_ITS_REQUIRED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CONTROLLER_UNAUTHORIZED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EMPTY_NAME\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EMPTY_SYMBOL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INSUFFICIENT_FUNDS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INSUFFICIENT_UNCLAIMED_TOKENS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PROJECT_ALREADY_HAS_TOKEN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RECIPIENT_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TOKENS_MUST_HAVE_18_DECIMALS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TOKEN_ALREADY_IN_USE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TOKEN_NOT_FOUND\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UNAUTHORIZED\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialUnclaimedBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialClaimedBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"preferClaimedTokens\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IJBToken\",\"name\":\"newToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IJBToken\",\"name\":\"oldToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Change\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialUnclaimedBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IJBToken\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"tokensWereClaimed\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"preferClaimedTokens\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"ShouldRequireClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_preferClaimedTokens\",\"type\":\"bool\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBToken\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeFor\",\"outputs\":[{\"internalType\":\"contract IJBToken\",\"name\":\"oldToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claimFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"directory\",\"outputs\":[{\"internalType\":\"contract IJBDirectory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"issueFor\",\"outputs\":[{\"internalType\":\"contract IJBToken\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_preferClaimedTokens\",\"type\":\"bool\"}],\"name\":\"mintFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorStore\",\"outputs\":[{\"internalType\":\"contract IJBOperatorStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IJBToken\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"projectOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"contract IJBProjects\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requireClaimFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"shouldRequireClaimingFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenOf\",\"outputs\":[{\"internalType\":\"contract IJBToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"totalSupplyOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unclaimedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unclaimedTotalSupplyOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Token balances can be either represented internally or claimed as ERC-20s into wallets. This contract manages these two representations and allows claiming.The total supply of a project's tokens and the balance of each account are calculated in this contract.Each project can bring their own token if they prefer, and swap between tokens at any time.Adheres to: IJBTokenStore: General interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules.Inherits from: JBControllerUtility: Includes convenience functionality for checking if the message sender is the current controller of the project whose data is being manipulated. JBOperatable: Includes convenience functionality for checking a message sender's permissions before executing certain transactions.\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"params\":{\"_holder\":\"The token holder to get a balance for.\",\"_projectId\":\"The project to get the `_holder`s balance of.\"},\"returns\":{\"balance\":\"The project token balance of the `_holder\"}},\"burnFrom(address,uint256,uint256,bool)\":{\"details\":\"Only a project's current controller can burn its tokens.\",\"params\":{\"_amount\":\"The amount of tokens to burn.\",\"_holder\":\"The address that owns the tokens being burned.\",\"_preferClaimedTokens\":\"A flag indicating whether there's a preference for tokens to burned from the `_holder`s wallet if the project currently has a token contract attached.\",\"_projectId\":\"The ID of the project to which the burned tokens belong.\"}},\"changeFor(uint256,address,address)\":{\"details\":\"Only a project's current controller can change its token.This contract must have access to all of the token's `IJBToken` interface functions.Can't change to a token that's currently being used by another project.Changing to the zero address will remove the current token without adding a new one.\",\"params\":{\"_newOwner\":\"An address to transfer the current token's ownership to. This is optional, but it cannot be done later.\",\"_projectId\":\"The ID of the project to which the changed token belongs.\",\"_token\":\"The new token. Send an empty address to remove the project's current token without adding a new one, if claiming tokens isn't currency required by the project\"},\"returns\":{\"oldToken\":\"The token that was removed as the project's token.\"}},\"claimFor(address,uint256,uint256)\":{\"details\":\"Only a token holder or an operator specified by the token holder can claim its unclaimed tokens.\",\"params\":{\"_amount\":\"The amount of tokens to claim.\",\"_holder\":\"The owner of the tokens being claimed.\",\"_projectId\":\"The ID of the project whose tokens are being claimed.\"}},\"constructor\":{\"params\":{\"_directory\":\"A contract storing directories of terminals and controllers for each project.\",\"_operatorStore\":\"A contract storing operator assignments.\",\"_projects\":\"A contract which mints ERC-721's that represent project ownership and transfers.\"}},\"issueFor(uint256,string,string)\":{\"details\":\"Deploys a project's ERC-20 token contract.Only a project's current controller can issue its token.\",\"params\":{\"_name\":\"The ERC-20's name.\",\"_projectId\":\"The ID of the project being issued tokens.\",\"_symbol\":\"The ERC-20's symbol.\"},\"returns\":{\"token\":\"The token that was issued.\"}},\"mintFor(address,uint256,uint256,bool)\":{\"details\":\"Only a project's current controller can mint its tokens.\",\"params\":{\"_amount\":\"The amount of tokens to mint.\",\"_holder\":\"The address receiving the new tokens.\",\"_preferClaimedTokens\":\"A flag indicating whether there's a preference for minted tokens to be claimed automatically into the `_holder`s wallet if the project currently has a token contract attached.\",\"_projectId\":\"The ID of the project to which the tokens belong.\"}},\"shouldRequireClaimingFor(uint256,bool)\":{\"details\":\"Only a token holder or an operator can require claimed token.\",\"params\":{\"_flag\":\"A flag indicating whether or not claiming should be required.\",\"_projectId\":\"The ID of the project being affected.\"}},\"totalSupplyOf(uint256)\":{\"params\":{\"_projectId\":\"The ID of the project to get the total token supply of.\"},\"returns\":{\"totalSupply\":\"The total supply of the project's tokens.\"}},\"transferFrom(address,uint256,address,uint256)\":{\"details\":\"Only a token holder or an operator can transfer its unclaimed tokens.\",\"params\":{\"_amount\":\"The amount of tokens to transfer.\",\"_holder\":\"The address to transfer tokens from.\",\"_projectId\":\"The ID of the project whose tokens are being transferred.\",\"_recipient\":\"The recipient of the tokens.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOf(address,uint256)\":{\"notice\":\"The total balance of tokens a holder has for a specified project, including claimed and unclaimed tokens.\"},\"burnFrom(address,uint256,uint256,bool)\":{\"notice\":\"Burns a project's tokens.\"},\"changeFor(uint256,address,address)\":{\"notice\":\"Swap the current project's token for another, and transfer ownership of the current token to another address if needed.\"},\"claimFor(address,uint256,uint256)\":{\"notice\":\"Claims internally accounted for tokens into a holder's wallet.\"},\"directory()\":{\"notice\":\" The directory of terminals and controllers for projects.\"},\"issueFor(uint256,string,string)\":{\"notice\":\"Issues a project's ERC-20 tokens that'll be used when claiming tokens.\"},\"mintFor(address,uint256,uint256,bool)\":{\"notice\":\"Mint new project tokens.\"},\"operatorStore()\":{\"notice\":\" A contract storing operator assignments.\"},\"projectOf(address)\":{\"notice\":\"The ID of the project that each token belongs to. _token The token to check the project association of.\"},\"projects()\":{\"notice\":\"The Projects contract which mints ERC-721's that represent project ownership and transfers.\"},\"requireClaimFor(uint256)\":{\"notice\":\"A flag indicating if tokens are required to be issued as claimed for a particular project. _projectId The ID of the project to which the requirement applies.\"},\"shouldRequireClaimingFor(uint256,bool)\":{\"notice\":\"Allows a project to force all future mints of its tokens to be claimed into the holder's wallet, or revoke the flag if it's already set.\"},\"tokenOf(uint256)\":{\"notice\":\"Each project's attached token contract. _projectId The ID of the project to which the token belongs.\"},\"totalSupplyOf(uint256)\":{\"notice\":\"The total supply of tokens for each project, including claimed and unclaimed tokens.\"},\"transferFrom(address,uint256,address,uint256)\":{\"notice\":\"Allows a holder to transfer unclaimed tokens to another account.\"},\"unclaimedBalanceOf(address,uint256)\":{\"notice\":\"Each holder's balance of unclaimed tokens for each project. _holder The holder of balance. _projectId The ID of the project to which the token belongs.\"},\"unclaimedTotalSupplyOf(uint256)\":{\"notice\":\"The total supply of unclaimed tokens for each project. _projectId The ID of the project to which the token belongs.\"}},\"notice\":\"Manage token minting, burning, and account balances.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/JBTokenStore.sol\":\"JBTokenStore\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0-rc.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n            unchecked {\\n                _approve(sender, _msgSender(), currentAllowance - amount);\\n            }\\n        }\\n\\n        _transfer(sender, recipient, amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x960c7d0dbd995e42730f1957948bf22145b6be2a279fc7f3cfaad4b19fa4dbb1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/JBToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\nimport './interfaces/IJBToken.sol';\\n\\n/** \\n  @notice\\n  An ERC-20 token that can be used by a project in the `JBTokenStore`.\\n\\n  @dev\\n  Adheres to:\\n  IJBToken: Allows this contract to be used by projects in the JBTokenStore.\\n\\n  @dev\\n  Inherits from:\\n  ERC20: General token standard for fungible accounting. \\n  Ownable: Includes convenience functionality for checking a message sender's permissions before executing certain transactions.\\n*/\\ncontract JBToken is IJBToken, ERC20, Ownable {\\n  //*********************************************************************//\\n  // ------------------------- external views -------------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice\\n    The number of decimals included in the fixed point accounting of this token.\\n\\n    @return The number of decimals.\\n  */\\n  function decimals() public view override(ERC20, IJBToken) returns (uint8) {\\n    return super.decimals();\\n  }\\n\\n  /** \\n    @notice\\n    The total supply of this ERC20.\\n\\n    @return The total supply of this ERC20, as a fixed point number.\\n  */\\n  function totalSupply(uint256) external view override returns (uint256) {\\n    return super.totalSupply();\\n  }\\n\\n  /** \\n    @notice\\n    An account's balance of this ERC20.\\n\\n    @param _account The account to get a balance of.\\n\\n    @return The balance of the `_account` of this ERC20, as a fixed point number with 18 decimals.\\n  */\\n  function balanceOf(address _account, uint256) external view override returns (uint256) {\\n    return super.balanceOf(_account);\\n  }\\n\\n  //*********************************************************************//\\n  // -------------------------- constructor ---------------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @param _name The name of the token.\\n    @param _symbol The symbol that the token should be represented by.\\n  */\\n  constructor(string memory _name, string memory _symbol)\\n    ERC20(_name, _symbol)\\n  // solhint-disable-next-line no-empty-blocks\\n  {\\n\\n  }\\n\\n  //*********************************************************************//\\n  // ---------------------- external transactions ---------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice\\n    Mints more of the token.\\n\\n    @dev\\n    Only the owner of this contract cant mint more of it.\\n\\n    @param _account The account to mint the tokens for.\\n    @param _amount The amount of tokens to mint, as a fixed point number with 18 decimals.\\n  */\\n  function mint(\\n    uint256,\\n    address _account,\\n    uint256 _amount\\n  ) external override onlyOwner {\\n    return _mint(_account, _amount);\\n  }\\n\\n  /** \\n    @notice\\n    Burn some outstanding tokens.\\n\\n    @dev\\n    Only the owner of this contract cant burn some of its supply.\\n\\n    @param _account The account to burn tokens from.\\n    @param _amount The amount of tokens to burn, as a fixed point number with 18 decimals.\\n  */\\n  function burn(\\n    uint256,\\n    address _account,\\n    uint256 _amount\\n  ) external override onlyOwner {\\n    return _burn(_account, _amount);\\n  }\\n\\n  /** \\n    @notice\\n    Approves an account to spend tokens on the `msg.sender`s behalf.\\n\\n    @param _spender The address that will be spending tokens on the `msg.sender`s behalf.\\n    @param _amount The amount the `_spender` is allowed to spend.\\n  */\\n  function approve(\\n    uint256,\\n    address _spender,\\n    uint256 _amount\\n  ) external override {\\n    approve(_spender, _amount);\\n  }\\n\\n  /** \\n    @notice\\n    Transfer tokens to an account.\\n\\n    @param _to The destination address.\\n    @param _amount The amount of the transfer, as a fixed point number with 18 decimals.\\n  */\\n  function transfer(\\n    uint256,\\n    address _to,\\n    uint256 _amount\\n  ) external override {\\n    transfer(_to, _amount);\\n  }\\n\\n  /** \\n    @notice\\n    Transfer tokens between accounts.\\n\\n    @param _from The originating address.\\n    @param _to The destination address.\\n    @param _amount The amount of the transfer, as a fixed point number with 18 decimals.\\n  */\\n  function transferFrom(\\n    uint256,\\n    address _from,\\n    address _to,\\n    uint256 _amount\\n  ) external override {\\n    transferFrom(_from, _to, _amount);\\n  }\\n\\n  /** \\n    @notice\\n    Transfer ownership of this contract to another address.\\n\\n    @dev\\n    Only the owner of this contract can transfer it.\\n\\n    @param _newOwner The new owner.\\n  */\\n  function transferOwnership(address _newOwner)\\n    public\\n    virtual\\n    override(Ownable, IJBToken)\\n    onlyOwner\\n  {\\n    return super.transferOwnership(_newOwner);\\n  }\\n}\\n\",\"keccak256\":\"0x8e5a931ea421937f0b7401154c8b6395e60fd579f04dd96c7af467c05c0cdf0c\",\"license\":\"MIT\"},\"contracts/JBTokenStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './abstract/JBOperatable.sol';\\nimport './abstract/JBControllerUtility.sol';\\nimport './interfaces/IJBTokenStore.sol';\\nimport './libraries/JBOperations.sol';\\nimport './JBToken.sol';\\n\\n//*********************************************************************//\\n// --------------------------- custom errors ------------------------- //\\n//*********************************************************************//\\nerror EMPTY_NAME();\\nerror EMPTY_SYMBOL();\\nerror INSUFFICIENT_FUNDS();\\nerror INSUFFICIENT_UNCLAIMED_TOKENS();\\nerror RECIPIENT_ZERO_ADDRESS();\\nerror TOKEN_NOT_FOUND();\\nerror PROJECT_ALREADY_HAS_TOKEN();\\nerror CANT_REMOVE_TOKEN_IF_ITS_REQUIRED();\\nerror TOKENS_MUST_HAVE_18_DECIMALS();\\nerror TOKEN_ALREADY_IN_USE();\\n\\n/**\\n  @notice\\n  Manage token minting, burning, and account balances.\\n\\n  @dev\\n  Token balances can be either represented internally or claimed as ERC-20s into wallets.\\n  This contract manages these two representations and allows claiming.\\n\\n  @dev\\n  The total supply of a project's tokens and the balance of each account are calculated in this contract.\\n\\n  @dev\\n  Each project can bring their own token if they prefer, and swap between tokens at any time.\\n  \\n  @dev\\n  Adheres to:\\n  IJBTokenStore: General interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules.\\n\\n  @dev\\n  Inherits from:\\n  JBControllerUtility: Includes convenience functionality for checking if the message sender is the current controller of the project whose data is being manipulated.\\n  JBOperatable: Includes convenience functionality for checking a message sender's permissions before executing certain transactions.\\n*/\\ncontract JBTokenStore is IJBTokenStore, JBControllerUtility, JBOperatable {\\n  //*********************************************************************//\\n  // ---------------- public immutable stored properties --------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    The Projects contract which mints ERC-721's that represent project ownership and transfers.\\n  */\\n  IJBProjects public immutable override projects;\\n\\n  //*********************************************************************//\\n  // --------------------- public stored properties -------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    Each project's attached token contract.\\n\\n    _projectId The ID of the project to which the token belongs.\\n  */\\n  mapping(uint256 => IJBToken) public override tokenOf;\\n\\n  /**\\n    @notice\\n    The ID of the project that each token belongs to.\\n\\n    _token The token to check the project association of.\\n  */\\n  mapping(IJBToken => uint256) public override projectOf;\\n\\n  /**\\n    @notice\\n    The total supply of unclaimed tokens for each project.\\n\\n    _projectId The ID of the project to which the token belongs.\\n  */\\n  mapping(uint256 => uint256) public override unclaimedTotalSupplyOf;\\n\\n  /**\\n    @notice\\n    Each holder's balance of unclaimed tokens for each project.\\n\\n    _holder The holder of balance.\\n    _projectId The ID of the project to which the token belongs.\\n  */\\n  mapping(address => mapping(uint256 => uint256)) public override unclaimedBalanceOf;\\n\\n  /**\\n    @notice\\n    A flag indicating if tokens are required to be issued as claimed for a particular project.\\n\\n    _projectId The ID of the project to which the requirement applies.\\n  */\\n  mapping(uint256 => bool) public override requireClaimFor;\\n\\n  //*********************************************************************//\\n  // ------------------------- external views -------------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    The total supply of tokens for each project, including claimed and unclaimed tokens.\\n\\n    @param _projectId The ID of the project to get the total token supply of.\\n\\n    @return totalSupply The total supply of the project's tokens.\\n  */\\n  function totalSupplyOf(uint256 _projectId) external view override returns (uint256 totalSupply) {\\n    // Get a reference to the total supply of the project's unclaimed tokens.\\n    totalSupply = unclaimedTotalSupplyOf[_projectId];\\n\\n    // Get a reference to the project's current token.\\n    IJBToken _token = tokenOf[_projectId];\\n\\n    // If the project has a current token, add it's total supply to the total.\\n    if (_token != IJBToken(address(0))) totalSupply = totalSupply + _token.totalSupply(_projectId);\\n  }\\n\\n  /**\\n    @notice\\n    The total balance of tokens a holder has for a specified project, including claimed and unclaimed tokens.\\n\\n    @param _holder The token holder to get a balance for.\\n    @param _projectId The project to get the `_holder`s balance of.\\n\\n    @return balance The project token balance of the `_holder\\n  */\\n  function balanceOf(address _holder, uint256 _projectId)\\n    external\\n    view\\n    override\\n    returns (uint256 balance)\\n  {\\n    // Get a reference to the holder's unclaimed balance for the project.\\n    balance = unclaimedBalanceOf[_holder][_projectId];\\n\\n    // Get a reference to the project's current token.\\n    IJBToken _token = tokenOf[_projectId];\\n\\n    // If the project has a current token, add the holder's balance to the total.\\n    if (_token != IJBToken(address(0))) balance = balance + _token.balanceOf(_holder, _projectId);\\n  }\\n\\n  //*********************************************************************//\\n  // -------------------------- constructor ---------------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @param _operatorStore A contract storing operator assignments.\\n    @param _projects A contract which mints ERC-721's that represent project ownership and transfers.\\n    @param _directory A contract storing directories of terminals and controllers for each project.\\n  */\\n  constructor(\\n    IJBOperatorStore _operatorStore,\\n    IJBProjects _projects,\\n    IJBDirectory _directory\\n  ) JBOperatable(_operatorStore) JBControllerUtility(_directory) {\\n    projects = _projects;\\n  }\\n\\n  //*********************************************************************//\\n  // ---------------------- external transactions ---------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    Issues a project's ERC-20 tokens that'll be used when claiming tokens.\\n\\n    @dev\\n    Deploys a project's ERC-20 token contract.\\n\\n    @dev\\n    Only a project's current controller can issue its token.\\n\\n    @param _projectId The ID of the project being issued tokens.\\n    @param _name The ERC-20's name.\\n    @param _symbol The ERC-20's symbol.\\n\\n    @return token The token that was issued.\\n  */\\n  function issueFor(\\n    uint256 _projectId,\\n    string calldata _name,\\n    string calldata _symbol\\n  ) external override onlyController(_projectId) returns (IJBToken token) {\\n    // There must be a name.\\n    if (bytes(_name).length == 0) revert EMPTY_NAME();\\n\\n    // There must be a symbol.\\n    if (bytes(_symbol).length == 0) revert EMPTY_SYMBOL();\\n\\n    // The project shouldn't already have a token.\\n    if (tokenOf[_projectId] != IJBToken(address(0))) revert PROJECT_ALREADY_HAS_TOKEN();\\n\\n    // Deploy the token contract.\\n    token = new JBToken(_name, _symbol);\\n\\n    // Store the token contract.\\n    tokenOf[_projectId] = token;\\n\\n    // Store the project for the token.\\n    projectOf[token] = _projectId;\\n\\n    emit Issue(_projectId, token, _name, _symbol, msg.sender);\\n  }\\n\\n  /**\\n    @notice\\n    Swap the current project's token for another, and transfer ownership of the current token to another address if needed.\\n\\n    @dev\\n    Only a project's current controller can change its token.\\n\\n    @dev\\n    This contract must have access to all of the token's `IJBToken` interface functions.\\n\\n    @dev\\n    Can't change to a token that's currently being used by another project.\\n\\n    @dev\\n    Changing to the zero address will remove the current token without adding a new one.\\n\\n    @param _projectId The ID of the project to which the changed token belongs.\\n    @param _token The new token. Send an empty address to remove the project's current token without adding a new one, if claiming tokens isn't currency required by the project\\n    @param _newOwner An address to transfer the current token's ownership to. This is optional, but it cannot be done later.\\n\\n    @return oldToken The token that was removed as the project's token.\\n  */\\n  function changeFor(\\n    uint256 _projectId,\\n    IJBToken _token,\\n    address _newOwner\\n  ) external override onlyController(_projectId) returns (IJBToken oldToken) {\\n    // Can't remove the project's token if the project requires claiming tokens.\\n    if (_token == IJBToken(address(0)) && requireClaimFor[_projectId])\\n      revert CANT_REMOVE_TOKEN_IF_ITS_REQUIRED();\\n\\n    // Can't change to a token already in use.\\n    if (projectOf[_token] != 0) revert TOKEN_ALREADY_IN_USE();\\n\\n    // Can't change to a token that doesn't use 18 decimals.\\n    if (_token != IJBToken(address(0)) && _token.decimals() != 18)\\n      revert TOKENS_MUST_HAVE_18_DECIMALS();\\n\\n    // Get a reference to the current token for the project.\\n    oldToken = tokenOf[_projectId];\\n\\n    // Store the new token.\\n    tokenOf[_projectId] = _token;\\n\\n    // Store the project for the new token if the new token isn't the zero address.\\n    if (_token != IJBToken(address(0))) projectOf[_token] = _projectId;\\n\\n    // Reset the project for the old token if it isn't the zero address.\\n    if (oldToken != IJBToken(address(0))) projectOf[oldToken] = 0;\\n\\n    // If there's a current token and a new owner was provided, transfer ownership of the old token to the new owner.\\n    if (_newOwner != address(0) && oldToken != IJBToken(address(0)))\\n      oldToken.transferOwnership(_newOwner);\\n\\n    emit Change(_projectId, _token, oldToken, _newOwner, msg.sender);\\n  }\\n\\n  /**\\n    @notice\\n    Mint new project tokens.\\n\\n    @dev\\n    Only a project's current controller can mint its tokens.\\n\\n    @param _holder The address receiving the new tokens.\\n    @param _projectId The ID of the project to which the tokens belong.\\n    @param _amount The amount of tokens to mint.\\n    @param _preferClaimedTokens A flag indicating whether there's a preference for minted tokens to be claimed automatically into the `_holder`s wallet if the project currently has a token contract attached.\\n  */\\n  function mintFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount,\\n    bool _preferClaimedTokens\\n  ) external override onlyController(_projectId) {\\n    // Get a reference to the project's current token.\\n    IJBToken _token = tokenOf[_projectId];\\n\\n    // Save a reference to whether there exists a token and the caller prefers these claimed tokens or the project requires it.\\n    bool _shouldClaimTokens = (requireClaimFor[_projectId] || _preferClaimedTokens) &&\\n      _token != IJBToken(address(0));\\n\\n    if (_shouldClaimTokens)\\n      // If tokens should be claimed, mint tokens into the holder's wallet.\\n      _token.mint(_projectId, _holder, _amount);\\n    else {\\n      // Otherwise, add the tokens to the unclaimed balance and total supply.\\n      unclaimedBalanceOf[_holder][_projectId] = unclaimedBalanceOf[_holder][_projectId] + _amount;\\n      unclaimedTotalSupplyOf[_projectId] = unclaimedTotalSupplyOf[_projectId] + _amount;\\n    }\\n\\n    emit Mint(_holder, _projectId, _amount, _shouldClaimTokens, _preferClaimedTokens, msg.sender);\\n  }\\n\\n  /**\\n    @notice\\n    Burns a project's tokens.\\n\\n    @dev\\n    Only a project's current controller can burn its tokens.\\n\\n    @param _holder The address that owns the tokens being burned.\\n    @param _projectId The ID of the project to which the burned tokens belong.\\n    @param _amount The amount of tokens to burn.\\n    @param _preferClaimedTokens A flag indicating whether there's a preference for tokens to burned from the `_holder`s wallet if the project currently has a token contract attached.\\n  */\\n  function burnFrom(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount,\\n    bool _preferClaimedTokens\\n  ) external override onlyController(_projectId) {\\n    // Get a reference to the project's current token.\\n    IJBToken _token = tokenOf[_projectId];\\n\\n    // Get a reference to the amount of unclaimed project tokens the holder has.\\n    uint256 _unclaimedBalance = unclaimedBalanceOf[_holder][_projectId];\\n\\n    // Get a reference to the amount of the project's current token the holder has in their wallet.\\n    uint256 _claimedBalance = _token == IJBToken(address(0))\\n      ? 0\\n      : _token.balanceOf(_holder, _projectId);\\n\\n    // There must be adequate tokens to burn across the holder's claimed and unclaimed balance.\\n    if (_amount > _claimedBalance + _unclaimedBalance) revert INSUFFICIENT_FUNDS();\\n\\n    // The amount of tokens to burn.\\n    uint256 _claimedTokensToBurn;\\n\\n    // If there's no balance, redeem no tokens.\\n    if (_claimedBalance == 0)\\n      _claimedTokensToBurn = 0;\\n      // If prefer converted, redeem tokens before redeeming unclaimed tokens.\\n    else if (_preferClaimedTokens)\\n      _claimedTokensToBurn = _claimedBalance < _amount ? _claimedBalance : _amount;\\n      // Otherwise, redeem unclaimed tokens before claimed tokens.\\n    else _claimedTokensToBurn = _unclaimedBalance < _amount ? _amount - _unclaimedBalance : 0;\\n\\n    // The amount of unclaimed tokens to redeem.\\n    uint256 _unclaimedTokensToBurn = _amount - _claimedTokensToBurn;\\n\\n    // Subtract the tokens from the unclaimed balance and total supply.\\n    if (_unclaimedTokensToBurn > 0) {\\n      // Reduce the holders balance and the total supply.\\n      unclaimedBalanceOf[_holder][_projectId] =\\n        unclaimedBalanceOf[_holder][_projectId] -\\n        _unclaimedTokensToBurn;\\n      unclaimedTotalSupplyOf[_projectId] =\\n        unclaimedTotalSupplyOf[_projectId] -\\n        _unclaimedTokensToBurn;\\n    }\\n\\n    // Burn the claimed tokens.\\n    if (_claimedTokensToBurn > 0) _token.burn(_projectId, _holder, _claimedTokensToBurn);\\n\\n    emit Burn(\\n      _holder,\\n      _projectId,\\n      _amount,\\n      _unclaimedBalance,\\n      _claimedBalance,\\n      _preferClaimedTokens,\\n      msg.sender\\n    );\\n  }\\n\\n  /**\\n    @notice\\n    Claims internally accounted for tokens into a holder's wallet.\\n\\n    @dev\\n    Only a token holder or an operator specified by the token holder can claim its unclaimed tokens.\\n\\n    @param _holder The owner of the tokens being claimed.\\n    @param _projectId The ID of the project whose tokens are being claimed.\\n    @param _amount The amount of tokens to claim.\\n  */\\n  function claimFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount\\n  ) external override requirePermission(_holder, _projectId, JBOperations.CLAIM) {\\n    // Get a reference to the project's current token.\\n    IJBToken _token = tokenOf[_projectId];\\n\\n    // The project must have a token contract attached.\\n    if (_token == IJBToken(address(0))) revert TOKEN_NOT_FOUND();\\n\\n    // Get a reference to the amount of unclaimed project tokens the holder has.\\n    uint256 _unclaimedBalance = unclaimedBalanceOf[_holder][_projectId];\\n\\n    // There must be enough unclaimed tokens to claim.\\n    if (_unclaimedBalance < _amount) revert INSUFFICIENT_UNCLAIMED_TOKENS();\\n\\n    // Subtract the claim amount from the holder's unclaimed project token balance.\\n    unclaimedBalanceOf[_holder][_projectId] = unclaimedBalanceOf[_holder][_projectId] - _amount;\\n\\n    // Subtract the claim amount from the project's unclaimed total supply.\\n    unclaimedTotalSupplyOf[_projectId] = unclaimedTotalSupplyOf[_projectId] - _amount;\\n\\n    // Mint the equivalent amount of the project's token for the holder.\\n    _token.mint(_projectId, _holder, _amount);\\n\\n    emit Claim(_holder, _projectId, _unclaimedBalance, _amount, msg.sender);\\n  }\\n\\n  /**\\n    @notice\\n    Allows a holder to transfer unclaimed tokens to another account.\\n\\n    @dev\\n    Only a token holder or an operator can transfer its unclaimed tokens.\\n\\n    @param _holder The address to transfer tokens from.\\n    @param _projectId The ID of the project whose tokens are being transferred.\\n    @param _recipient The recipient of the tokens.\\n    @param _amount The amount of tokens to transfer.\\n  */\\n  function transferFrom(\\n    address _holder,\\n    uint256 _projectId,\\n    address _recipient,\\n    uint256 _amount\\n  ) external override requirePermission(_holder, _projectId, JBOperations.TRANSFER) {\\n    // Can't transfer to the zero address.\\n    if (_recipient == address(0)) revert RECIPIENT_ZERO_ADDRESS();\\n\\n    // Get a reference to the holder's unclaimed project token balance.\\n    uint256 _unclaimedBalance = unclaimedBalanceOf[_holder][_projectId];\\n\\n    // The holder must have enough unclaimed tokens to transfer.\\n    if (_amount > _unclaimedBalance) revert INSUFFICIENT_UNCLAIMED_TOKENS();\\n\\n    // Subtract from the holder's unclaimed token balance.\\n    unclaimedBalanceOf[_holder][_projectId] = unclaimedBalanceOf[_holder][_projectId] - _amount;\\n\\n    // Add the unclaimed project tokens to the recipient's balance.\\n    unclaimedBalanceOf[_recipient][_projectId] =\\n      unclaimedBalanceOf[_recipient][_projectId] +\\n      _amount;\\n\\n    emit Transfer(_holder, _projectId, _recipient, _amount, msg.sender);\\n  }\\n\\n  /**\\n    @notice\\n    Allows a project to force all future mints of its tokens to be claimed into the holder's wallet, or revoke the flag if it's already set.\\n\\n    @dev\\n    Only a token holder or an operator can require claimed token.\\n\\n    @param _projectId The ID of the project being affected.\\n    @param _flag A flag indicating whether or not claiming should be required.\\n  */\\n  function shouldRequireClaimingFor(uint256 _projectId, bool _flag)\\n    external\\n    override\\n    requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.REQUIRE_CLAIM)\\n  {\\n    // Get a reference to the project's current token.\\n    IJBToken _token = tokenOf[_projectId];\\n\\n    // The project must have a token contract attached.\\n    if (_token == IJBToken(address(0))) revert TOKEN_NOT_FOUND();\\n\\n    // Store the flag.\\n    requireClaimFor[_projectId] = _flag;\\n\\n    emit ShouldRequireClaim(_projectId, _flag, msg.sender);\\n  }\\n}\\n\",\"keccak256\":\"0x6b8c6a20310d78911b2000d4918fc3af33b9ba74f87fbf0537c16a984d390e77\",\"license\":\"MIT\"},\"contracts/abstract/JBControllerUtility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBControllerUtility.sol';\\n\\n//*********************************************************************//\\n// --------------------------- custom errors -------------------------- //\\n//*********************************************************************//\\nerror CONTROLLER_UNAUTHORIZED();\\n\\n/** \\n  @notice\\n  Provides tools for contracts with functionality that can only be accessed by a project's controller.\\n*/\\nabstract contract JBControllerUtility is IJBControllerUtility {\\n  modifier onlyController(uint256 _projectId) {\\n    if (address(directory.controllerOf(_projectId)) != msg.sender) revert CONTROLLER_UNAUTHORIZED();\\n    _;\\n  }\\n\\n  /** \\n    @notice \\n    The directory of terminals and controllers for projects.\\n  */\\n  IJBDirectory public immutable override directory;\\n\\n  /** \\n    @param _directory A contract storing directories of terminals and controllers for each project.\\n  */\\n  constructor(IJBDirectory _directory) {\\n    directory = _directory;\\n  }\\n}\\n\",\"keccak256\":\"0xda6886fd8ca2d6e3e3e30b045626eddae9e590e929f3b3ab67893217ed23de93\",\"license\":\"MIT\"},\"contracts/abstract/JBOperatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBOperatable.sol';\\n\\n// --------------------------- custom errors -------------------------- //\\n//*********************************************************************//\\nerror UNAUTHORIZED();\\n\\n/** \\n  @notice\\n  Modifiers to allow access to functions based on the message sender's operator status.\\n*/\\nabstract contract JBOperatable is IJBOperatable {\\n  modifier requirePermission(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) {\\n    _requirePermission(_account, _domain, _permissionIndex);\\n    _;\\n  }\\n\\n  modifier requirePermissionAllowingOverride(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex,\\n    bool _override\\n  ) {\\n    _requirePermissionAllowingOverride(_account, _domain, _permissionIndex, _override);\\n    _;\\n  }\\n\\n  /** \\n    @notice \\n    A contract storing operator assignments.\\n  */\\n  IJBOperatorStore public immutable override operatorStore;\\n\\n  /** \\n    @param _operatorStore A contract storing operator assignments.\\n  */\\n  constructor(IJBOperatorStore _operatorStore) {\\n    operatorStore = _operatorStore;\\n  }\\n\\n  /** \\n    @notice\\n    Require the message sender is either the account or has the specified permission.\\n\\n    @param _account The account to allow.\\n    @param _domain The domain within which the permission index will be checked.\\n    @param _domain The permission index that an operator must have within the specified domain to be allowed.\\n  */\\n  function _requirePermission(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) internal view {\\n    if (\\n      msg.sender != _account &&\\n      !operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex) &&\\n      !operatorStore.hasPermission(msg.sender, _account, 0, _permissionIndex)\\n    ) revert UNAUTHORIZED();\\n  }\\n\\n  /** \\n    @notice\\n    Require the message sender is either the account, has the specified permission, or the override condition is true.\\n\\n    @param _account The account to allow.\\n    @param _domain The domain within which the permission index will be checked.\\n    @param _domain The permission index that an operator must have within the specified domain to be allowed.\\n    @param _override The override condition to allow.\\n  */\\n  function _requirePermissionAllowingOverride(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex,\\n    bool _override\\n  ) internal view {\\n    if (\\n      !_override &&\\n      msg.sender != _account &&\\n      !operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex) &&\\n      !operatorStore.hasPermission(msg.sender, _account, 0, _permissionIndex)\\n    ) revert UNAUTHORIZED();\\n  }\\n}\\n\",\"keccak256\":\"0x3bf82338b8e5e40ad0b85af9237b7bcac4cee6e54f47025d675bf13ec17ed0ec\",\"license\":\"MIT\"},\"contracts/enums/JBBallotState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nenum JBBallotState {\\n  Approved,\\n  Active,\\n  Failed\\n}\\n\",\"keccak256\":\"0xda8544e199de385d447fc485037d66ba906a88985328a5e1e0ddcb178b44f382\",\"license\":\"MIT\"},\"contracts/interfaces/IJBController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../structs/JBFundingCycleData.sol';\\nimport './../structs/JBFundingCycleMetadata.sol';\\nimport './../structs/JBProjectMetadata.sol';\\nimport './../structs/JBGroupedSplits.sol';\\nimport './../structs/JBFundAccessConstraints.sol';\\nimport './../structs/JBProjectMetadata.sol';\\nimport './IJBDirectory.sol';\\nimport './IJBToken.sol';\\nimport './IJBPaymentTerminal.sol';\\nimport './IJBFundingCycleStore.sol';\\nimport './IJBTokenStore.sol';\\nimport './IJBSplitsStore.sol';\\n\\ninterface IJBController {\\n  event LaunchProject(uint256 configuration, uint256 projectId, string memo, address caller);\\n\\n  event LaunchFundingCycles(uint256 configuration, uint256 projectId, string memo, address caller);\\n\\n  event ReconfigureFundingCycles(\\n    uint256 configuration,\\n    uint256 projectId,\\n    string memo,\\n    address caller\\n  );\\n\\n  event SetFundAccessConstraints(\\n    uint256 indexed fundingCycleConfiguration,\\n    uint256 indexed fundingCycleNumber,\\n    uint256 indexed projectId,\\n    JBFundAccessConstraints constraints,\\n    address caller\\n  );\\n\\n  event DistributeReservedTokens(\\n    uint256 indexed fundingCycleConfiguration,\\n    uint256 indexed fundingCycleNumber,\\n    uint256 indexed projectId,\\n    address beneficiary,\\n    uint256 tokenCount,\\n    uint256 beneficiaryTokenCount,\\n    string memo,\\n    address caller\\n  );\\n\\n  event DistributeToReservedTokenSplit(\\n    uint256 indexed fundingCycleConfiguration,\\n    uint256 indexed fundingCycleNumber,\\n    uint256 indexed projectId,\\n    JBSplit split,\\n    uint256 tokenCount,\\n    address caller\\n  );\\n\\n  event MintTokens(\\n    address indexed beneficiary,\\n    uint256 indexed projectId,\\n    uint256 tokenCount,\\n    uint256 beneficiaryTokenCount,\\n    string memo,\\n    uint256 reservedRate,\\n    address caller\\n  );\\n\\n  event BurnTokens(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    uint256 tokenCount,\\n    string memo,\\n    address caller\\n  );\\n\\n  event Migrate(uint256 indexed projectId, IJBController to, address caller);\\n\\n  event PrepMigration(uint256 indexed projectId, IJBController from, address caller);\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function fundingCycleStore() external view returns (IJBFundingCycleStore);\\n\\n  function tokenStore() external view returns (IJBTokenStore);\\n\\n  function splitsStore() external view returns (IJBSplitsStore);\\n\\n  function directory() external view returns (IJBDirectory);\\n\\n  function reservedTokenBalanceOf(uint256 _projectId, uint256 _reservedRate)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function distributionLimitOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBPaymentTerminal _terminal\\n  ) external view returns (uint256 distributionLimit, uint256 distributionLimitCurrency);\\n\\n  function overflowAllowanceOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBPaymentTerminal _terminal\\n  ) external view returns (uint256 overflowAllowance, uint256 overflowAllowanceCurrency);\\n\\n  function totalOutstandingTokensOf(uint256 _projectId, uint256 _reservedRate)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function currentFundingCycleOf(uint256 _projectId)\\n    external\\n    returns (JBFundingCycle memory fundingCycle, JBFundingCycleMetadata memory metadata);\\n\\n  function queuedFundingCycleOf(uint256 _projectId)\\n    external\\n    returns (JBFundingCycle memory fundingCycle, JBFundingCycleMetadata memory metadata);\\n\\n  function launchProjectFor(\\n    address _owner,\\n    JBProjectMetadata calldata _projectMetadata,\\n    JBFundingCycleData calldata _data,\\n    JBFundingCycleMetadata calldata _metadata,\\n    uint256 _mustStartAtOrAfter,\\n    JBGroupedSplits[] memory _groupedSplits,\\n    JBFundAccessConstraints[] memory _fundAccessConstraints,\\n    IJBPaymentTerminal[] memory _terminals,\\n    string calldata _memo\\n  ) external returns (uint256 projectId);\\n\\n  function launchFundingCyclesFor(\\n    uint256 _projectId,\\n    JBFundingCycleData calldata _data,\\n    JBFundingCycleMetadata calldata _metadata,\\n    uint256 _mustStartAtOrAfter,\\n    JBGroupedSplits[] memory _groupedSplits,\\n    JBFundAccessConstraints[] memory _fundAccessConstraints,\\n    IJBPaymentTerminal[] memory _terminals,\\n    string calldata _memo\\n  ) external returns (uint256 configuration);\\n\\n  function reconfigureFundingCyclesOf(\\n    uint256 _projectId,\\n    JBFundingCycleData calldata _data,\\n    JBFundingCycleMetadata calldata _metadata,\\n    uint256 _mustStartAtOrAfter,\\n    JBGroupedSplits[] memory _groupedSplits,\\n    JBFundAccessConstraints[] memory _fundAccessConstraints,\\n    string calldata _memo\\n  ) external returns (uint256);\\n\\n  function issueTokenFor(\\n    uint256 _projectId,\\n    string calldata _name,\\n    string calldata _symbol\\n  ) external returns (IJBToken token);\\n\\n  function changeTokenOf(\\n    uint256 _projectId,\\n    IJBToken _token,\\n    address _newOwner\\n  ) external;\\n\\n  function mintTokensOf(\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    address _beneficiary,\\n    string calldata _memo,\\n    bool _preferClaimedTokens,\\n    bool _useReservedRate\\n  ) external returns (uint256 beneficiaryTokenCount);\\n\\n  function burnTokensOf(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    string calldata _memo,\\n    bool _preferClaimedTokens\\n  ) external;\\n\\n  function distributeReservedTokensOf(uint256 _projectId, string memory _memo)\\n    external\\n    returns (uint256);\\n\\n  function prepForMigrationOf(uint256 _projectId, IJBController _from) external;\\n\\n  function migrate(uint256 _projectId, IJBController _to) external;\\n}\\n\",\"keccak256\":\"0xdb72d86b86df005dd9c13236519cde11502dc5a35f33009bb15491792f16896a\",\"license\":\"MIT\"},\"contracts/interfaces/IJBControllerUtility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBDirectory.sol';\\n\\ninterface IJBControllerUtility {\\n  function directory() external view returns (IJBDirectory);\\n}\\n\",\"keccak256\":\"0xb280df3e7bd6abc2fb533073a806a9b3edfea8f5be2791c6eb1767c79dd98f88\",\"license\":\"MIT\"},\"contracts/interfaces/IJBDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBPaymentTerminal.sol';\\nimport './IJBProjects.sol';\\nimport './IJBFundingCycleStore.sol';\\nimport './IJBController.sol';\\n\\ninterface IJBDirectory {\\n  event SetController(uint256 indexed projectId, IJBController indexed controller, address caller);\\n\\n  event AddTerminal(uint256 indexed projectId, IJBPaymentTerminal indexed terminal, address caller);\\n\\n  event SetTerminals(uint256 indexed projectId, IJBPaymentTerminal[] terminals, address caller);\\n\\n  event SetPrimaryTerminal(\\n    uint256 indexed projectId,\\n    address indexed token,\\n    IJBPaymentTerminal indexed terminal,\\n    address caller\\n  );\\n\\n  event SetIsAllowedToSetFirstController(address indexed addr, bool indexed flag, address caller);\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function fundingCycleStore() external view returns (IJBFundingCycleStore);\\n\\n  function controllerOf(uint256 _projectId) external view returns (IJBController);\\n\\n  function isAllowedToSetFirstController(address _address) external view returns (bool);\\n\\n  function terminalsOf(uint256 _projectId) external view returns (IJBPaymentTerminal[] memory);\\n\\n  function isTerminalOf(uint256 _projectId, IJBPaymentTerminal _terminal)\\n    external\\n    view\\n    returns (bool);\\n\\n  function primaryTerminalOf(uint256 _projectId, address _token)\\n    external\\n    view\\n    returns (IJBPaymentTerminal);\\n\\n  function setControllerOf(uint256 _projectId, IJBController _controller) external;\\n\\n  function setTerminalsOf(uint256 _projectId, IJBPaymentTerminal[] calldata _terminals) external;\\n\\n  function setPrimaryTerminalOf(uint256 _projectId, IJBPaymentTerminal _terminal) external;\\n\\n  function setIsAllowedToSetFirstController(address _address, bool _flag) external;\\n}\\n\",\"keccak256\":\"0x492203859707f9bdfa5534279eec20af5cb69e10a0206b67f5ad7777836f9f9f\",\"license\":\"MIT\"},\"contracts/interfaces/IJBFundingCycleBallot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../enums/JBBallotState.sol';\\n\\ninterface IJBFundingCycleBallot {\\n  function duration() external view returns (uint256);\\n\\n  function stateOf(uint256 _projectId, uint256 _configuration)\\n    external\\n    view\\n    returns (JBBallotState);\\n}\\n\",\"keccak256\":\"0xb551f980855057e8221b30aa49ec75f312334fef3b2c0c5c38eb883236e51651\",\"license\":\"MIT\"},\"contracts/interfaces/IJBFundingCycleDataSource.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBFundingCycleStore.sol';\\n\\nimport './IJBPayDelegate.sol';\\nimport './IJBRedemptionDelegate.sol';\\n\\nimport './../structs/JBPayParamsData.sol';\\nimport './../structs/JBRedeemParamsData.sol';\\n\\ninterface IJBFundingCycleDataSource {\\n  function payParams(JBPayParamsData calldata _data)\\n    external\\n    view\\n    returns (\\n      uint256 weight,\\n      string memory memo,\\n      IJBPayDelegate delegate\\n    );\\n\\n  function redeemParams(JBRedeemParamsData calldata _data)\\n    external\\n    view\\n    returns (\\n      uint256 reclaimAmount,\\n      string memory memo,\\n      IJBRedemptionDelegate delegate\\n    );\\n}\\n\",\"keccak256\":\"0xd3ce9c75c0e5da0de3bdf6fb57a75e39e4782d2042128deed0c15949c6c4e38f\",\"license\":\"MIT\"},\"contracts/interfaces/IJBFundingCycleStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBFundingCycleBallot.sol';\\nimport './../structs/JBFundingCycle.sol';\\nimport './../structs/JBFundingCycleData.sol';\\n\\ninterface IJBFundingCycleStore {\\n  event Configure(\\n    uint256 indexed configuration,\\n    uint256 indexed projectId,\\n    JBFundingCycleData data,\\n    uint256 metadata,\\n    uint256 mustStartAtOrAfter,\\n    address caller\\n  );\\n\\n  event Init(uint256 indexed configuration, uint256 indexed projectId, uint256 indexed basedOn);\\n\\n  function latestConfigurationOf(uint256 _projectId) external view returns (uint256);\\n\\n  function get(uint256 _projectId, uint256 _configuration)\\n    external\\n    view\\n    returns (JBFundingCycle memory);\\n\\n  function queuedOf(uint256 _projectId) external view returns (JBFundingCycle memory);\\n\\n  function currentOf(uint256 _projectId) external view returns (JBFundingCycle memory);\\n\\n  function currentBallotStateOf(uint256 _projectId) external view returns (JBBallotState);\\n\\n  function configureFor(\\n    uint256 _projectId,\\n    JBFundingCycleData calldata _data,\\n    uint256 _metadata,\\n    uint256 _mustStartAtOrAfter\\n  ) external returns (JBFundingCycle memory fundingCycle);\\n}\\n\",\"keccak256\":\"0xf8212a9e70b63c818f53aec3ed8728a2679d7b984d93b67a7d7e2890b6da8260\",\"license\":\"MIT\"},\"contracts/interfaces/IJBOperatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBOperatorStore.sol';\\n\\ninterface IJBOperatable {\\n  function operatorStore() external view returns (IJBOperatorStore);\\n}\\n\",\"keccak256\":\"0x150097e253a667d2336367445bea019bb3669ef7c82d358befe1f4cdd480e9aa\",\"license\":\"MIT\"},\"contracts/interfaces/IJBOperatorStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../structs/JBOperatorData.sol';\\n\\ninterface IJBOperatorStore {\\n  event SetOperator(\\n    address indexed operator,\\n    address indexed account,\\n    uint256 indexed domain,\\n    uint256[] permissionIndexes,\\n    uint256 packed\\n  );\\n\\n  function permissionsOf(\\n    address _operator,\\n    address _account,\\n    uint256 _domain\\n  ) external view returns (uint256);\\n\\n  function hasPermission(\\n    address _operator,\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) external view returns (bool);\\n\\n  function hasPermissions(\\n    address _operator,\\n    address _account,\\n    uint256 _domain,\\n    uint256[] calldata _permissionIndexes\\n  ) external view returns (bool);\\n\\n  function setOperator(JBOperatorData calldata _operatorData) external;\\n\\n  function setOperators(JBOperatorData[] calldata _operatorData) external;\\n}\\n\",\"keccak256\":\"0x50a26fddc575a50176df7deb9225ec1816b0158c9e9b8555e7921a3261254ed8\",\"license\":\"MIT\"},\"contracts/interfaces/IJBPayDelegate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../structs/JBDidPayData.sol';\\n\\ninterface IJBPayDelegate {\\n  function didPay(JBDidPayData calldata _data) external;\\n}\\n\",\"keccak256\":\"0x09990dcf429fd0a9b740cfffdb580e6c3186e1492313d97f8c1cce03638f6f91\",\"license\":\"MIT\"},\"contracts/interfaces/IJBPaymentTerminal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBDirectory.sol';\\n\\ninterface IJBPaymentTerminal {\\n  function token() external view returns (address);\\n\\n  function currency() external view returns (uint256);\\n\\n  function decimals() external view returns (uint256);\\n\\n  // Return value must be a fixed point number with 18 decimals.\\n  function currentEthOverflowOf(uint256 _projectId) external view returns (uint256);\\n\\n  function pay(\\n    uint256 _amount,\\n    uint256 _projectId,\\n    address _beneficiary,\\n    uint256 _minReturnedTokens,\\n    bool _preferClaimedTokens,\\n    string calldata _memo,\\n    bytes calldata _metadata\\n  ) external payable returns (uint256 beneficiaryTokenCount);\\n\\n  function addToBalanceOf(\\n    uint256 _projectId,\\n    uint256 _amount,\\n    string calldata _memo\\n  ) external payable;\\n}\\n\",\"keccak256\":\"0x72c97d10f25fd51a8f55a3bfe01a1b9df76b06fb8b0a2accd8297f21cebe5af5\",\"license\":\"MIT\"},\"contracts/interfaces/IJBProjects.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport './IJBPaymentTerminal.sol';\\nimport './IJBTokenUriResolver.sol';\\n\\nimport './../structs/JBProjectMetadata.sol';\\nimport './IJBTokenUriResolver.sol';\\n\\ninterface IJBProjects is IERC721 {\\n  event Create(\\n    uint256 indexed projectId,\\n    address indexed owner,\\n    JBProjectMetadata metadata,\\n    address caller\\n  );\\n\\n  event SetMetadata(uint256 indexed projectId, JBProjectMetadata metadata, address caller);\\n\\n  event SetTokenUriResolver(IJBTokenUriResolver resolver, address caller);\\n\\n  function count() external view returns (uint256);\\n\\n  function metadataContentOf(uint256 _projectId, uint256 _domain)\\n    external\\n    view\\n    returns (string memory);\\n\\n  function tokenUriResolver() external view returns (IJBTokenUriResolver);\\n\\n  function createFor(address _owner, JBProjectMetadata calldata _metadata)\\n    external\\n    returns (uint256 projectId);\\n\\n  function setMetadataOf(uint256 _projectId, JBProjectMetadata calldata _metadata) external;\\n\\n  function setTokenUriResolver(IJBTokenUriResolver _newResolver) external;\\n}\\n\",\"keccak256\":\"0x4482009111379531b33b6d924760987a6a68c83eeb71092d74fccd65960ca5ce\",\"license\":\"MIT\"},\"contracts/interfaces/IJBRedemptionDelegate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBFundingCycleStore.sol';\\n\\nimport './../structs/JBDidRedeemData.sol';\\n\\ninterface IJBRedemptionDelegate {\\n  function didRedeem(JBDidRedeemData calldata _data) external;\\n}\\n\",\"keccak256\":\"0x8f98d6412d36ad4048a878aea19e6c11ed40ce63b765b0aa32d71623d2b5068f\",\"license\":\"MIT\"},\"contracts/interfaces/IJBSplitAllocator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '../structs/JBSplitAllocationData.sol';\\n\\ninterface IJBSplitAllocator {\\n  function allocate(JBSplitAllocationData calldata _data) external payable;\\n}\\n\",\"keccak256\":\"0x0f5d9e98fa8069881d6173b956980481a76d6cddecf76e6adcb4dbb4cc80541e\",\"license\":\"MIT\"},\"contracts/interfaces/IJBSplitsStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBOperatorStore.sol';\\nimport './IJBProjects.sol';\\nimport './IJBDirectory.sol';\\nimport './IJBSplitAllocator.sol';\\n\\nimport './../structs/JBSplit.sol';\\n\\ninterface IJBSplitsStore {\\n  event SetSplit(\\n    uint256 indexed projectId,\\n    uint256 indexed domain,\\n    uint256 indexed group,\\n    JBSplit split,\\n    address caller\\n  );\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function directory() external view returns (IJBDirectory);\\n\\n  function splitsOf(\\n    uint256 _projectId,\\n    uint256 _domain,\\n    uint256 _group\\n  ) external view returns (JBSplit[] memory);\\n\\n  function set(\\n    uint256 _projectId,\\n    uint256 _domain,\\n    uint256 _group,\\n    JBSplit[] memory _splits\\n  ) external;\\n}\\n\",\"keccak256\":\"0x62053dc00bc5e2042983fc5136dd91ca6ff2fe21d293fa0b58b5f907a95d04d9\",\"license\":\"MIT\"},\"contracts/interfaces/IJBToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IJBToken {\\n  function decimals() external view returns (uint8);\\n\\n  function totalSupply(uint256 _projectId) external view returns (uint256);\\n\\n  function balanceOf(address _account, uint256 _projectId) external view returns (uint256);\\n\\n  function mint(\\n    uint256 _projectId,\\n    address _account,\\n    uint256 _amount\\n  ) external;\\n\\n  function burn(\\n    uint256 _projectId,\\n    address _account,\\n    uint256 _amount\\n  ) external;\\n\\n  function approve(\\n    uint256,\\n    address _spender,\\n    uint256 _amount\\n  ) external;\\n\\n  function transfer(\\n    uint256 _projectId,\\n    address _to,\\n    uint256 _amount\\n  ) external;\\n\\n  function transferFrom(\\n    uint256 _projectId,\\n    address _from,\\n    address _to,\\n    uint256 _amount\\n  ) external;\\n\\n  function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0x23ce305c82865663f8dbd3315dfc85d04a963f05a50bfcfa1c7c1ce29397422d\",\"license\":\"MIT\"},\"contracts/interfaces/IJBTokenStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBProjects.sol';\\nimport './IJBToken.sol';\\n\\ninterface IJBTokenStore {\\n  event Issue(\\n    uint256 indexed projectId,\\n    IJBToken indexed token,\\n    string name,\\n    string symbol,\\n    address caller\\n  );\\n\\n  event Mint(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    uint256 amount,\\n    bool tokensWereClaimed,\\n    bool preferClaimedTokens,\\n    address caller\\n  );\\n\\n  event Burn(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    uint256 amount,\\n    uint256 initialUnclaimedBalance,\\n    uint256 initialClaimedBalance,\\n    bool preferClaimedTokens,\\n    address caller\\n  );\\n\\n  event Claim(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    uint256 initialUnclaimedBalance,\\n    uint256 amount,\\n    address caller\\n  );\\n\\n  event ShouldRequireClaim(uint256 indexed projectId, bool indexed flag, address caller);\\n\\n  event Change(\\n    uint256 indexed projectId,\\n    IJBToken indexed newToken,\\n    IJBToken indexed oldToken,\\n    address owner,\\n    address caller\\n  );\\n\\n  event Transfer(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    address indexed recipient,\\n    uint256 amount,\\n    address caller\\n  );\\n\\n  function tokenOf(uint256 _projectId) external view returns (IJBToken);\\n\\n  function projectOf(IJBToken _token) external view returns (uint256);\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function unclaimedBalanceOf(address _holder, uint256 _projectId) external view returns (uint256);\\n\\n  function unclaimedTotalSupplyOf(uint256 _projectId) external view returns (uint256);\\n\\n  function totalSupplyOf(uint256 _projectId) external view returns (uint256);\\n\\n  function balanceOf(address _holder, uint256 _projectId) external view returns (uint256 _result);\\n\\n  function requireClaimFor(uint256 _projectId) external view returns (bool);\\n\\n  function issueFor(\\n    uint256 _projectId,\\n    string calldata _name,\\n    string calldata _symbol\\n  ) external returns (IJBToken token);\\n\\n  function changeFor(\\n    uint256 _projectId,\\n    IJBToken _token,\\n    address _newOwner\\n  ) external returns (IJBToken oldToken);\\n\\n  function burnFrom(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount,\\n    bool _preferClaimedTokens\\n  ) external;\\n\\n  function mintFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount,\\n    bool _preferClaimedTokens\\n  ) external;\\n\\n  function shouldRequireClaimingFor(uint256 _projectId, bool _flag) external;\\n\\n  function claimFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount\\n  ) external;\\n\\n  function transferFrom(\\n    address _holder,\\n    uint256 _projectId,\\n    address _recipient,\\n    uint256 _amount\\n  ) external;\\n}\\n\",\"keccak256\":\"0x2b7a6cdb457e710161079a46683e9804d66d4cc7d18be8f64de25ba7bfadf9ef\",\"license\":\"MIT\"},\"contracts/interfaces/IJBTokenUriResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IJBTokenUriResolver {\\n  function getUri(uint256 _projectId) external view returns (string memory tokenUri);\\n}\\n\",\"keccak256\":\"0xa64ece706d7ce399095f403b08383391c089da4995b5ee000b278d93d242a475\",\"license\":\"MIT\"},\"contracts/libraries/JBOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nlibrary JBOperations {\\n  uint256 public constant RECONFIGURE = 1;\\n  uint256 public constant REDEEM = 2;\\n  uint256 public constant MIGRATE_CONTROLLER = 3;\\n  uint256 public constant MIGRATE_TERMINAL = 4;\\n  uint256 public constant PROCESS_FEES = 5;\\n  uint256 public constant SET_METADATA = 6;\\n  uint256 public constant ISSUE = 7;\\n  uint256 public constant CHANGE_TOKEN = 8;\\n  uint256 public constant MINT = 9;\\n  uint256 public constant BURN = 10;\\n  uint256 public constant CLAIM = 11;\\n  uint256 public constant TRANSFER = 12;\\n  uint256 public constant REQUIRE_CLAIM = 13;\\n  uint256 public constant SET_CONTROLLER = 14;\\n  uint256 public constant SET_TERMINALS = 15;\\n  uint256 public constant SET_PRIMARY_TERMINAL = 16;\\n  uint256 public constant USE_ALLOWANCE = 17;\\n  uint256 public constant SET_SPLITS = 18;\\n}\\n\",\"keccak256\":\"0x828971de3d07c31e294c188335e250ee0b28919dd86f0dd570f89b97cca13932\",\"license\":\"MIT\"},\"contracts/libraries/JBSplitsGroups.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nlibrary JBSplitsGroups {\\n  uint256 public constant ETH_PAYOUT = 1;\\n  uint256 public constant RESERVED_TOKENS = 2;\\n}\\n\",\"keccak256\":\"0x855a78b0411f3b0a0e2d96009e0f910a971d0175d18cbcac9eab1541c8968288\",\"license\":\"MIT\"},\"contracts/structs/JBDidPayData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './JBTokenAmount.sol';\\n\\nstruct JBDidPayData {\\n  // The address from which the payment originated.\\n  address payer;\\n  // The ID of the project for which the payment was made.\\n  uint256 projectId;\\n  // The amount of the payment. Includes the token being paid, the value, the number of decimals included, and the currency of the amount.\\n  JBTokenAmount amount;\\n  // The number of project tokens minted for the beneficiary.\\n  uint256 projectTokenCount;\\n  // The address to which the tokens were minted.\\n  address beneficiary;\\n  // The memo that is being emitted alongside the payment.\\n  string memo;\\n  // Metadata to send to the delegate.\\n  bytes metadata;\\n}\\n\",\"keccak256\":\"0xc9854f845a2aca0953e1c850d40fa8c930638e1e0ebfaea103c93c8500150bbb\",\"license\":\"MIT\"},\"contracts/structs/JBDidRedeemData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './JBTokenAmount.sol';\\n\\nstruct JBDidRedeemData {\\n  // The holder of the tokens being redeemed.\\n  address holder;\\n  // The project to which the redeemed tokens are associated.\\n  uint256 projectId;\\n  // The number of project tokens being redeemed.\\n  uint256 projectTokenCount;\\n  // The reclaimed amount. Includes the token being paid, the value, the number of decimals included, and the currency of the amount.\\n  JBTokenAmount reclaimedAmount;\\n  // The address to which the reclaimed amount will be sent.\\n  address payable beneficiary;\\n  // The memo that is being emitted alongside the redemption.\\n  string memo;\\n  // Metadata to send to the delegate.\\n  bytes metadata;\\n}\\n\",\"keccak256\":\"0xcf3cc8993b656900db99a916ee1a9a73547894ffd0295fa273c7a40ffa3b5c37\",\"license\":\"MIT\"},\"contracts/structs/JBFundAccessConstraints.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBPaymentTerminal.sol';\\n\\nstruct JBFundAccessConstraints {\\n  // The terminal within which the distribution limit and the overflow allowance applies.\\n  IJBPaymentTerminal terminal;\\n  // The amount of the distribution limit, as a fixed point number with the same number of decimals as the terminal within which the limit applies.\\n  uint256 distributionLimit;\\n  // The currency of the distribution limit.\\n  uint256 distributionLimitCurrency;\\n  // The amount of the allowance, as a fixed point number with the same number of decimals as the terminal within which the allowance applies.\\n  uint256 overflowAllowance;\\n  // The currency of the overflow allowance.\\n  uint256 overflowAllowanceCurrency;\\n}\\n\",\"keccak256\":\"0x05b5b0c7edcbd4202f4bd119c754284fa2a83840b69c0e87770970770f2cf7e8\",\"license\":\"MIT\"},\"contracts/structs/JBFundingCycle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleBallot.sol';\\n\\nstruct JBFundingCycle {\\n  // The funding cycle number for each project.\\n  // Each funding cycle has a number that is an increment of the cycle that directly preceded it.\\n  // Each project's first funding cycle has a number of 1.\\n  uint256 number;\\n  // The timestamp when the parameters for this funding cycle were configured.\\n  // This value will stay the same for subsequent funding cycles that roll over from an originally configured cycle.\\n  uint256 configuration;\\n  // The `configuration` of the funding cycle that was active when this cycle was created.\\n  uint256 basedOn;\\n  // The timestamp marking the moment from which the funding cycle is considered active.\\n  // It is a unix timestamp measured in seconds.\\n  uint256 start;\\n  // The number of seconds the funding cycle lasts for, after which a new funding cycle will start.\\n  // A duration of 0 means that the funding cycle will stay active until the project owner explicitly issues a reconfiguration, at which point a new funding cycle will immediately start with the updated properties.\\n  // If the duration is greater than 0, a project owner cannot make changes to a funding cycle's parameters while it is active \\u2013 any proposed changes will apply to the subsequent cycle.\\n  // If no changes are proposed, a funding cycle rolls over to another one with the same properties but new `start` timestamp and a discounted `weight`.\\n  uint256 duration;\\n  // A fixed point number with 18 decimals that contracts can use to base arbitrary calculations on.\\n  // For example, payment terminals can use this to determine how many tokens should be minted when a payment is received.\\n  uint256 weight;\\n  // A percent by how much the `weight` of the subsequent funding cycle should be reduced, if the project owner hasn't configured the subsequent funding cycle with an explicit `weight`.\\n  // If it's 0, each funding cycle will have equal weight.\\n  // If the number is 90%, the next funding cycle will have a 10% smaller weight.\\n  // This weight is out of `JBConstants.MAX_DISCOUNT_RATE`.\\n  uint256 discountRate;\\n  // An address of a contract that says whether a proposed reconfiguration should be accepted or rejected.\\n  // It can be used to create rules around how a project owner can change funding cycle parameters over time.\\n  IJBFundingCycleBallot ballot;\\n  // Extra data that can be associated with a funding cycle.\\n  uint256 metadata;\\n}\\n\",\"keccak256\":\"0x1b8aabfc72ba75adcf6d26789732e3bd511976b28f6916f1ebde21a795dcfdf7\",\"license\":\"MIT\"},\"contracts/structs/JBFundingCycleData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleBallot.sol';\\n\\nstruct JBFundingCycleData {\\n  // The number of seconds the funding cycle lasts for, after which a new funding cycle will start.\\n  // A duration of 0 means that the funding cycle will stay active until the project owner explicitly issues a reconfiguration, at which point a new funding cycle will immediately start with the updated properties.\\n  // If the duration is greater than 0, a project owner cannot make changes to a funding cycle's parameters while it is active \\u2013 any proposed changes will apply to the subsequent cycle.\\n  // If no changes are proposed, a funding cycle rolls over to another one with the same properties but new `start` timestamp and a discounted `weight`.\\n  uint256 duration;\\n  // A fixed point number with 18 decimals that contracts can use to base arbitrary calculations on.\\n  // For example, payment terminals can use this to determine how many tokens should be minted when a payment is received.\\n  uint256 weight;\\n  // A percent by how much the `weight` of the subsequent funding cycle should be reduced, if the project owner hasn't configured the subsequent funding cycle with an explicit `weight`.\\n  // If it's 0, each funding cycle will have equal weight.\\n  // If the number is 90%, the next funding cycle will have a 10% smaller weight.\\n  // This weight is out of `JBConstants.MAX_DISCOUNT_RATE`.\\n  uint256 discountRate;\\n  // An address of a contract that says whether a proposed reconfiguration should be accepted or rejected.\\n  // It can be used to create rules around how a project owner can change funding cycle parameters over time.\\n  IJBFundingCycleBallot ballot;\\n}\\n\",\"keccak256\":\"0x453e70b56ec06dab62d72fe04e5e38539f6503c1d42fa0462cf51d6d94cffa66\",\"license\":\"MIT\"},\"contracts/structs/JBFundingCycleMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleDataSource.sol';\\n\\nstruct JBFundingCycleMetadata {\\n  // The reserved rate of the funding cycle. This number is a percentage calculated out of `JBConstants.MAX_RESERVED_RATE`.\\n  uint256 reservedRate;\\n  // The redemption rate of the funding cycle. This number is a percentage calculated out of `JBConstants.MAX_REDEMPTION_RATE`.\\n  uint256 redemptionRate;\\n  // The redemption rate to use during an active ballot of the funding cycle. This number is a percentage calculated out of `JBConstants.MAX_REDEMPTION_RATE`.\\n  uint256 ballotRedemptionRate;\\n  // If the pay functionality should be paused during the funding cycle.\\n  bool pausePay;\\n  // If the distribute functionality should be paused during the funding cycle.\\n  bool pauseDistributions;\\n  // If the redeem functionality should be paused during the funding cycle.\\n  bool pauseRedeem;\\n  // If the burn functionality should be paused during the funding cycle.\\n  bool pauseBurn;\\n  // If the mint functionality should be allowed during the funding cycle.\\n  bool allowMinting;\\n  // If changing tokens should be allowed during this funding cycle.\\n  bool allowChangeToken;\\n  // If migrating terminals should be allowed during this funding cycle.\\n  bool allowTerminalMigration;\\n  // If migrating controllers should be allowed during this funding cycle.\\n  bool allowControllerMigration;\\n  // If setting terminals should be allowed during this funding cycle.\\n  bool allowSetTerminals;\\n  // If setting a new controller should be allowed during this funding cycle.\\n  bool allowSetController;\\n  // If fees should be held during this funding cycle.\\n  bool holdFees;\\n  // If redemptions should use the project's balance held in all terminals instead of the project's local terminal balance from which the redemption is being fulfilled.\\n  bool useTotalOverflowForRedemptions;\\n  // If the data source should be used for pay transactions during this funding cycle.\\n  bool useDataSourceForPay;\\n  // If the data source should be used for redeem transactions during this funding cycle.\\n  bool useDataSourceForRedeem;\\n  // The data source to use during this funding cycle.\\n  IJBFundingCycleDataSource dataSource;\\n}\\n\",\"keccak256\":\"0xb8d9a6c35303e519434778ddd873c64e1de9e8db87a181050b24c6dc4a34cfa0\",\"license\":\"MIT\"},\"contracts/structs/JBGroupedSplits.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './JBSplit.sol';\\nimport '../libraries/JBSplitsGroups.sol';\\n\\nstruct JBGroupedSplits {\\n  // The group indentifier.\\n  uint256 group;\\n  // The splits to associate with the group.\\n  JBSplit[] splits;\\n}\\n\",\"keccak256\":\"0xdd5c829c9838a32789918ad54666d91c2489616da991a0adb040cdadb0d99dbf\",\"license\":\"MIT\"},\"contracts/structs/JBOperatorData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBOperatorData {\\n  // The address of the operator.\\n  address operator;\\n  // The domain within which the operator is being given permissions.\\n  // A domain of 0 is a wildcard domain, which gives an operator access to all domains.\\n  uint256 domain;\\n  // The indexes of the permissions the operator is being given.\\n  uint256[] permissionIndexes;\\n}\\n\",\"keccak256\":\"0x322991d4e93cf67e62b11039d3639c970abffae7707c3f773ac6c85bd326e333\",\"license\":\"MIT\"},\"contracts/structs/JBPayParamsData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBPaymentTerminal.sol';\\n\\nimport './JBTokenAmount.sol';\\n\\nstruct JBPayParamsData {\\n  // The terminal that is facilitating the payment.\\n  IJBPaymentTerminal terminal;\\n  // The address from which the payment originated.\\n  address payer;\\n  // The amount of the payment. Includes the token being paid, the value, the number of decimals included, and the currency of the amount.\\n  JBTokenAmount amount;\\n  // The ID of the project being paid.\\n  uint256 projectId;\\n  // The weight of the funding cycle during which the payment is being made.\\n  uint256 weight;\\n  // The reserved rate of the funding cycle during which the payment is being made.\\n  uint256 reservedRate;\\n  // The memo that was sent alongside the payment.\\n  string memo;\\n  // Arbitrary metadata provided by the payer.\\n  bytes metadata;\\n}\\n\",\"keccak256\":\"0x54a73d77a14756f479d85f3fe484c88a87356790ee28f995dbdb9fe18979d810\",\"license\":\"MIT\"},\"contracts/structs/JBProjectMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBProjectMetadata {\\n  // Metadata content.\\n  string content;\\n  // The domain within which the metadata applies.\\n  uint256 domain;\\n}\\n\",\"keccak256\":\"0xc3b76e617b453c6dc60cc8bd3683ff7726f1a967b28fb8e760b1d16f52c07d17\",\"license\":\"MIT\"},\"contracts/structs/JBRedeemParamsData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBPaymentTerminal.sol';\\n\\nstruct JBRedeemParamsData {\\n  // The terminal that is facilitating the redemption.\\n  IJBPaymentTerminal terminal;\\n  // The holder of the tokens being redeemed.\\n  address holder;\\n  // The ID of the project whos tokens are being redeemed.\\n  uint256 projectId;\\n  // The proposed number of tokens being redeemed, as a fixed point number with 18 decimals.\\n  uint256 tokenCount;\\n  // The total supply of tokens used in the calculation, as a fixed point number with 18 decimals.\\n  uint256 totalSupply;\\n  // The amount of overflow used in the reclaim amount calculation.\\n  uint256 overflow;\\n  // The number of decimals included in the reclaim amount fixed point number.\\n  uint256 decimals;\\n  // The currency that the reclaim amount is expected to be in terms of.\\n  uint256 currency;\\n  // The amount that should be reclaimed by the redeemer using the protocol's standard bonding curve redemption formula.\\n  uint256 reclaimAmount;\\n  // If overflow across all of a project's terminals is being used when making redemptions.\\n  bool useTotalOverflow;\\n  // The redemption rate of the funding cycle during which the redemption is being made.\\n  uint256 redemptionRate;\\n  // The ballot redemption rate of the funding cycle during which the redemption is being made.\\n  uint256 ballotRedemptionRate;\\n  // The proposed memo that is being emitted alongside the redemption.\\n  string memo;\\n  // Arbitrary metadata provided by the redeemer.\\n  bytes metadata;\\n}\\n\",\"keccak256\":\"0x04cc0633eff14f5116f7c2940a7e9fd402e72ee4752ce6f281a8adb1e81fc741\",\"license\":\"MIT\"},\"contracts/structs/JBSplit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBSplitAllocator.sol';\\n\\nstruct JBSplit {\\n  // A flag that only has effect if a projectId is also specified, and the project has a token contract attached.\\n  // If so, this flag indicates if the tokens that result from making a payment to the project should be delivered claimed into the beneficiary's wallet, or unclaimed to save gas.\\n  bool preferClaimed;\\n  // The percent of the whole group that this split occupies. This number is out of `JBConstants.SPLITS_TOTAL_PERCENT`.\\n  uint256 percent;\\n  // If an allocator is not set but a projectId is set, funds will be sent to the protocol treasury belonging to the project who's ID is specified.\\n  // Resulting tokens will be routed to the beneficiary with the claimed token preference respected.\\n  uint256 projectId;\\n  // The role the of the beneficary depends on whether or not projectId is specified, and whether or not an allocator is specified.\\n  // If allocator is set, the beneficiary will be forwarded to the allocator for it to use.\\n  // If allocator is not set but projectId is set, the beneficiary is the address to which the project's tokens will be sent that result from a payment to it.\\n  // If neither allocator or projectId are set, the beneficiary is where the funds from the split will be sent.\\n  address payable beneficiary;\\n  // Specifies if the split should be unchangeable until the specified time, with the exception of extending the locked period.\\n  uint256 lockedUntil;\\n  // If an allocator is specified, funds will be sent to the allocator contract along with all properties of this split.\\n  IJBSplitAllocator allocator;\\n}\\n\",\"keccak256\":\"0x013a11e0e40e487b6414757dcbfbf3e808f2a418877672d116ad40cbb7c885d4\",\"license\":\"MIT\"},\"contracts/structs/JBSplitAllocationData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './JBSplit.sol';\\nimport './JBTokenAmount.sol';\\n\\nstruct JBSplitAllocationData {\\n  // The amount being sent to the split allocator, as a fixed point number.\\n  uint256 amount;\\n  // The number of decimals in the amount.\\n  uint256 decimals;\\n  // The project to which the split belongs.\\n  uint256 projectId;\\n  // The group to which the split belongs.\\n  uint256 group;\\n  // The split that caused the allocation.\\n  JBSplit split;\\n}\\n\",\"keccak256\":\"0xa8e97304f050e913bd0fac4f137e9a64cc9f49ba877b96f27c955578947894ba\",\"license\":\"MIT\"},\"contracts/structs/JBTokenAmount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBTokenAmount {\\n  // The token the payment was made in.\\n  address token;\\n  // The amount of tokens that was paid, as a fixed point number.\\n  uint256 value;\\n  // The number of decimals included in the value fixed point number.\\n  uint256 decimals;\\n  // The expected currency of the value.\\n  uint256 currency;\\n}\\n\",\"keccak256\":\"0x64550c4998ba63f2f602bc4f9aac4f81ede7fc475c42f5e7c9f44508b3fee769\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162003a5038038062003a5083398101604081905262000034916200005a565b6001600160601b0319606091821b811660805292811b831660a0521b1660c052620000c7565b6000806000606084860312156200007057600080fd5b83516200007d81620000ae565b60208501519093506200009081620000ae565b6040850151909250620000a381620000ae565b809150509250925092565b6001600160a01b0381168114620000c457600080fd5b50565b60805160601c60a05160601c60c05160601c61391f620001316000396000818161027e01526118ee0152600081816102eb01528181611ae20152611bc3015260008181610313015281816104e901528181610ce80152818161114701526115f3015261391f6000f3fe60806040523480156200001157600080fd5b5060043610620001315760003560e01c80638b79543c11620000c0578063ad007d63116200008b578063ceddd3e4116200006e578063ceddd3e41462000335578063ea78803f146200034c578063ff0186c5146200038557600080fd5b8063ad007d6314620002e5578063c41c2f24146200030d57600080fd5b80638b79543c1462000278578063906ebd0f14620002a0578063a7f2a70b14620002b7578063ac689bcd14620002ce57600080fd5b806357e4c778116200010157806357e4c77814620001d45780636607955d146200021157806375b0d9cd146200022a5780637b4d8e2c146200024157600080fd5b8062fdd58e14620001365780631412884f1462000160578063176309b714620001835780635287af3714620001a6575b600080fd5b6200014d6200014736600462001d01565b6200039c565b6040519081526020015b60405180910390f35b6200014d6200017136600462001e44565b60026020526000908152604090205481565b6200014d6200019436600462001e24565b60016020526000908152604090205481565b6200014d620001b736600462001d01565b600360209081526000928352604080842090915290825290205481565b620001eb620001e536600462001eab565b6200049e565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200162000157565b620002286200022236600462001d7d565b6200094d565b005b6200014d6200023b36600462001e44565b62000bb2565b620002676200025236600462001e44565b60046020526000908152604090205460ff1681565b604051901515815260200162000157565b620001eb7f000000000000000000000000000000000000000000000000000000000000000081565b62000228620002b136600462001db5565b62000ca0565b620001eb620002c836600462001ef2565b620010fc565b62000228620002df36600462001d30565b620013cf565b620001eb7f000000000000000000000000000000000000000000000000000000000000000081565b620001eb7f000000000000000000000000000000000000000000000000000000000000000081565b620002286200034636600462001db5565b620015ab565b620001eb6200035d36600462001e44565b60006020819052908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b620002286200039636600462001e78565b620018bf565b73ffffffffffffffffffffffffffffffffffffffff80831660009081526003602090815260408083208584528252808320549183905290912054909116801562000497576040517efdd58e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301526024820185905282169062fdd58e9060440160206040518083038186803b1580156200044d57600080fd5b505afa15801562000462573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000488919062001e5e565b6200049490836200206b565b91505b5092915050565b6040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018490526000908490339073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa9060240160206040518083038186803b1580156200052c57600080fd5b505afa15801562000541573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000567919062001cda565b73ffffffffffffffffffffffffffffffffffffffff1614620005b5576040517fab7f741400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8416158015620005e8575060008581526004602052604090205460ff165b1562000620576040517fd4ae123800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8416600090815260016020526040902054156200067e576040517f1379a84600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8416158015906200072957508373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015620006e657600080fd5b505afa158015620006fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000721919062001f73565b60ff16601214155b1562000761576040517fadc38c9400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000858152602081905260409020805473ffffffffffffffffffffffffffffffffffffffff8681167fffffffffffffffffffffffff00000000000000000000000000000000000000008316811790935516925015620007e35773ffffffffffffffffffffffffffffffffffffffff841660009081526001602052604090208590555b73ffffffffffffffffffffffffffffffffffffffff821615620008275773ffffffffffffffffffffffffffffffffffffffff82166000908152600160205260408120555b73ffffffffffffffffffffffffffffffffffffffff83161580159062000862575073ffffffffffffffffffffffffffffffffffffffff821615155b15620008ec576040517ff2fde38b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015283169063f2fde38b90602401600060405180830381600087803b158015620008d257600080fd5b505af1158015620008e7573d6000803e3d6000fd5b505050505b6040805173ffffffffffffffffffffffffffffffffffffffff8581168252336020830152808516929087169188917f53b937570201bb723ab1530f41c21f62fba8df64afef862cb0a6f4eccc3094dc910160405180910390a4509392505050565b8282600b6200095e83838362001a67565b60008581526020819052604090205473ffffffffffffffffffffffffffffffffffffffff1680620009bb576040517f73c463ce00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff871660009081526003602090815260408083208984529091529020548581101562000a27576040517f83fc8b2d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff881660009081526003602090815260408083208a845290915290205462000a6590879062002086565b73ffffffffffffffffffffffffffffffffffffffff891660009081526003602090815260408083208b845282528083209390935560029052205462000aac90879062002086565b6000888152600260205260409081902091909155517f836a10400000000000000000000000000000000000000000000000000000000081526004810188905273ffffffffffffffffffffffffffffffffffffffff89811660248301526044820188905283169063836a104090606401600060405180830381600087803b15801562000b3657600080fd5b505af115801562000b4b573d6000803e3d6000fd5b505060408051848152602081018a9052338183015290518a935073ffffffffffffffffffffffffffffffffffffffff8c1692507fe718784128df3c3d45fbd6519133fee450494f7cdb2b53830a5087cd47f980829181900360600190a35050505050505050565b600081815260026020908152604080832054918390529091205473ffffffffffffffffffffffffffffffffffffffff16801562000c9a576040517fbd85b0390000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff82169063bd85b0399060240160206040518083038186803b15801562000c5057600080fd5b505afa15801562000c65573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c8b919062001e5e565b62000c9790836200206b565b91505b50919050565b6040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018490528390339073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa9060240160206040518083038186803b15801562000d2b57600080fd5b505afa15801562000d40573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d66919062001cda565b73ffffffffffffffffffffffffffffffffffffffff161462000db4576040517fab7f741400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000848152602081815260408083205473ffffffffffffffffffffffffffffffffffffffff89811685526003845282852089865290935290832054911691821562000ea7576040517efdd58e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89811660048301526024820189905284169062fdd58e9060440160206040518083038186803b15801562000e6657600080fd5b505afa15801562000e7b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ea1919062001e5e565b62000eaa565b60005b905062000eb882826200206b565b86111562000ef2576040517fe793143800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008162000f035750600062000f42565b851562000f235786821062000f19578662000f1b565b815b905062000f42565b86831062000f3357600062000f3f565b62000f3f838862002086565b90505b600062000f50828962002086565b9050801562000fee5773ffffffffffffffffffffffffffffffffffffffff8a1660009081526003602090815260408083208c845290915290205462000f9790829062002086565b73ffffffffffffffffffffffffffffffffffffffff8b1660009081526003602090815260408083208d845282528083209390935560029052205462000fde90829062002086565b60008a8152600260205260409020555b811562001087576040517f9eea5f66000000000000000000000000000000000000000000000000000000008152600481018a905273ffffffffffffffffffffffffffffffffffffffff8b8116602483015260448201849052861690639eea5f6690606401600060405180830381600087803b1580156200106d57600080fd5b505af115801562001082573d6000803e3d6000fd5b505050505b60408051898152602081018690529081018490528715156060820152336080820152899073ffffffffffffffffffffffffffffffffffffffff8c16907fbe100da6adaa492f7ba1b0de916ae2606126ec7b044d7aa8ec74971a607ceecd9060a00160405180910390a350505050505050505050565b6040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018690526000908690339073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa9060240160206040518083038186803b1580156200118a57600080fd5b505afa1580156200119f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011c5919062001cda565b73ffffffffffffffffffffffffffffffffffffffff161462001213576040517fab7f741400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b846200124b576040517f92bf449d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8262001283576040517f571431a700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008781526020819052604090205473ffffffffffffffffffffffffffffffffffffffff1615620012e0576040517fa54630ac00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85858585604051620012f29062001c80565b62001301949392919062001fe1565b604051809103906000f0801580156200131e573d6000803e3d6000fd5b5060008881526020818152604080832080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86169081179091558084526001909252918290208a905590519193509088907f1b1705bef26552c8f314c5eb80e9c84f02876c2f7f30a7f9ad5cafd17d5fa6da90620013bd908a908a908a908a90339062002017565b60405180910390a35095945050505050565b8383600c620013e083838362001a67565b73ffffffffffffffffffffffffffffffffffffffff85166200142e576040517fc6587bab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff87166000908152600360209081526040808320898452909152902054808511156200149a576040517f83fc8b2d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff881660009081526003602090815260408083208a8452909152902054620014d890869062002086565b73ffffffffffffffffffffffffffffffffffffffff808a1660009081526003602081815260408084208d8552825280842095909555928a16825282528281208a825290915220546200152c9086906200206b565b73ffffffffffffffffffffffffffffffffffffffff87811660008181526003602090815260408083208d8452825291829020949094558051898152339481019490945290928a928c16917fae47e55abe3902569528abe4272b889079230a248aec0659a2939a90354982c6910160405180910390a45050505050505050565b6040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018490528390339073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa9060240160206040518083038186803b1580156200163657600080fd5b505afa1580156200164b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001671919062001cda565b73ffffffffffffffffffffffffffffffffffffffff1614620016bf576040517fab7f741400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008481526020818152604080832054600490925282205473ffffffffffffffffffffffffffffffffffffffff909116919060ff1680620016fd5750835b80156200171f575073ffffffffffffffffffffffffffffffffffffffff821615155b90508015620017bf576040517f836a10400000000000000000000000000000000000000000000000000000000081526004810187905273ffffffffffffffffffffffffffffffffffffffff88811660248301526044820187905283169063836a104090606401600060405180830381600087803b158015620017a057600080fd5b505af1158015620017b5573d6000803e3d6000fd5b5050505062001854565b73ffffffffffffffffffffffffffffffffffffffff87166000908152600360209081526040808320898452909152902054620017fd9086906200206b565b73ffffffffffffffffffffffffffffffffffffffff881660009081526003602090815260408083208a8452825280832093909355600290522054620018449086906200206b565b6000878152600260205260409020555b604080518681528215156020820152851515818301523360608201529051879173ffffffffffffffffffffffffffffffffffffffff8a16917f5dd3ead325af435e56bc762b40de54c96de6071938d18a26414245807591d86f9181900360800190a350505050505050565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018390527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b1580156200194657600080fd5b505afa1580156200195b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001981919062001cda565b82600d6200199183838362001a67565b60008581526020819052604090205473ffffffffffffffffffffffffffffffffffffffff1680620019ee576040517f73c463ce00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008681526004602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016881515908117909155915133815288917f91c234a3a3ebdc00c9bbd80f24661ca100d784b6d9f53923b3a693344719e08c910160405180910390a3505050505050565b3373ffffffffffffffffffffffffffffffffffffffff84161480159062001b6257506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801562001b2557600080fd5b505afa15801562001b3a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001b60919062001e04565b155b801562001c4357506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801562001c0657600080fd5b505afa15801562001c1b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001c41919062001e04565b155b1562001c7b576040517f075fd2b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b6117e5806200210583390190565b60008083601f84011262001ca157600080fd5b50813567ffffffffffffffff81111562001cba57600080fd5b60208301915083602082850101111562001cd357600080fd5b9250929050565b60006020828403121562001ced57600080fd5b815162001cfa81620020cf565b9392505050565b6000806040838503121562001d1557600080fd5b823562001d2281620020cf565b946020939093013593505050565b6000806000806080858703121562001d4757600080fd5b843562001d5481620020cf565b935060208501359250604085013562001d6d81620020cf565b9396929550929360600135925050565b60008060006060848603121562001d9357600080fd5b833562001da081620020cf565b95602085013595506040909401359392505050565b6000806000806080858703121562001dcc57600080fd5b843562001dd981620020cf565b93506020850135925060408501359150606085013562001df981620020f5565b939692955090935050565b60006020828403121562001e1757600080fd5b815162001cfa81620020f5565b60006020828403121562001e3757600080fd5b813562001cfa81620020cf565b60006020828403121562001e5757600080fd5b5035919050565b60006020828403121562001e7157600080fd5b5051919050565b6000806040838503121562001e8c57600080fd5b82359150602083013562001ea081620020f5565b809150509250929050565b60008060006060848603121562001ec157600080fd5b83359250602084013562001ed581620020cf565b9150604084013562001ee781620020cf565b809150509250925092565b60008060008060006060868803121562001f0b57600080fd5b85359450602086013567ffffffffffffffff8082111562001f2b57600080fd5b62001f3989838a0162001c8e565b9096509450604088013591508082111562001f5357600080fd5b5062001f628882890162001c8e565b969995985093965092949392505050565b60006020828403121562001f8657600080fd5b815160ff8116811462001cfa57600080fd5b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b60408152600062001ff760408301868862001f98565b82810360208401526200200c81858762001f98565b979650505050505050565b6060815260006200202d60608301878962001f98565b82810360208401526200204281868862001f98565b91505073ffffffffffffffffffffffffffffffffffffffff831660408301529695505050505050565b60008219821115620020815762002081620020a0565b500190565b6000828210156200209b576200209b620020a0565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114620020f257600080fd5b50565b8015158114620020f257600080fdfe60806040523480156200001157600080fd5b50604051620017e5380380620017e583398101604081905262000034916200023b565b8151829082906200004d906003906020850190620000de565b50805162000063906004906020840190620000de565b505050620000806200007a6200008860201b60201c565b6200008c565b5050620002f8565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620000ec90620002a5565b90600052602060002090601f0160209004810192826200011057600085556200015b565b82601f106200012b57805160ff19168380011785556200015b565b828001600101855582156200015b579182015b828111156200015b5782518255916020019190600101906200013e565b50620001699291506200016d565b5090565b5b808211156200016957600081556001016200016e565b600082601f8301126200019657600080fd5b81516001600160401b0380821115620001b357620001b3620002e2565b604051601f8301601f19908116603f01168101908282118183101715620001de57620001de620002e2565b81604052838152602092508683858801011115620001fb57600080fd5b600091505b838210156200021f578582018301518183018401529082019062000200565b83821115620002315760008385830101525b9695505050505050565b600080604083850312156200024f57600080fd5b82516001600160401b03808211156200026757600080fd5b620002758683870162000184565b935060208501519150808211156200028c57600080fd5b506200029b8582860162000184565b9150509250929050565b600181811c90821680620002ba57607f821691505b60208210811415620002dc57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6114dd80620003086000396000f3fe608060405234801561001057600080fd5b50600436106101765760003560e01c8063836a1040116100d8578063a457c2d71161008c578063dd62ed3e11610066578063dd62ed3e1461030b578063f2fde38b14610351578063f8548e361461036457600080fd5b8063a457c2d7146102d2578063a9059cbb146102e5578063bd85b039146102f857600080fd5b80638da5cb5b116100bd5780638da5cb5b1461028f57806395d89b41146102b75780639eea5f66146102bf57600080fd5b8063836a1040146102695780638cb0a5111461027c57600080fd5b806323b872dd1161012f5780633950935111610114578063395093511461021857806370a082311461022b578063715018a61461026157600080fd5b806323b872dd146101f6578063313ce5671461020957600080fd5b8063095ea7b311610160578063095ea7b3146101b657806318160ddd146101d95780631c0f12b6146101e157600080fd5b8062fdd58e1461017b57806306fdde03146101a1575b600080fd5b61018e6101893660046112d6565b610377565b6040519081526020015b60405180910390f35b6101a96103a5565b6040516101989190611382565b6101c96101c43660046112d6565b610437565b6040519015158152602001610198565b60025461018e565b6101f46101ef366004611319565b61044d565b005b6101c961020436600461129a565b61045f565b60405160128152602001610198565b6101c96102263660046112d6565b61056f565b61018e61023936600461124c565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6101f46105b8565b6101f461027736600461135d565b610645565b6101f461028a36600461135d565b6106d5565b60055460405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610198565b6101a96106e5565b6101f46102cd36600461135d565b6106f4565b6101c96102e03660046112d6565b61077f565b6101c96102f33660046112d6565b610857565b61018e610306366004611300565b610864565b61018e610319366004611267565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b6101f461035f36600461124c565b610875565b6101f461037236600461135d565b610902565b73ffffffffffffffffffffffffffffffffffffffff82166000908152602081905260408120545b9392505050565b6060600380546103b490611424565b80601f01602080910402602001604051908101604052809291908181526020018280546103e090611424565b801561042d5780601f106104025761010080835404028352916020019161042d565b820191906000526020600020905b81548152906001019060200180831161041057829003601f168201915b5050505050905090565b600061044433848461090c565b50600192915050565b61045883838361045f565b5050505050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526001602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610559578281101561054c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610559853385840361090c565b610564858585610abf565b506001949350505050565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490916104449185906105b39086906113f5565b61090c565b60055473ffffffffffffffffffffffffffffffffffffffff163314610639576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610543565b6106436000610d72565b565b60055473ffffffffffffffffffffffffffffffffffffffff1633146106c6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610543565b6106d08282610de9565b505050565b6106df8282610437565b50505050565b6060600480546103b490611424565b60055473ffffffffffffffffffffffffffffffffffffffff163314610775576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610543565b6106d08282610f09565b33600090815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915281205482811015610840576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610543565b61084d338585840361090c565b5060019392505050565b6000610444338484610abf565b600061086f60025490565b92915050565b60055473ffffffffffffffffffffffffffffffffffffffff1633146108f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610543565b6108ff816110f6565b50565b6106df8282610857565b73ffffffffffffffffffffffffffffffffffffffff83166109ae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610543565b73ffffffffffffffffffffffffffffffffffffffff8216610a51576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610543565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8316610b62576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610543565b73ffffffffffffffffffffffffffffffffffffffff8216610c05576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610543565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205481811015610cbb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610543565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260208190526040808220858503905591851681529081208054849290610cff9084906113f5565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610d6591815260200190565b60405180910390a36106df565b6005805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b73ffffffffffffffffffffffffffffffffffffffff8216610e66576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610543565b8060026000828254610e7891906113f5565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604081208054839290610eb29084906113f5565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b73ffffffffffffffffffffffffffffffffffffffff8216610fac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610543565b73ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604090205481811015611062576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610543565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260208190526040812083830390556002805484929061109e90849061140d565b909155505060405182815260009073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b60055473ffffffffffffffffffffffffffffffffffffffff163314611177576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610543565b73ffffffffffffffffffffffffffffffffffffffff811661121a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610543565b6108ff81610d72565b803573ffffffffffffffffffffffffffffffffffffffff8116811461124757600080fd5b919050565b60006020828403121561125e57600080fd5b61039e82611223565b6000806040838503121561127a57600080fd5b61128383611223565b915061129160208401611223565b90509250929050565b6000806000606084860312156112af57600080fd5b6112b884611223565b92506112c660208501611223565b9150604084013590509250925092565b600080604083850312156112e957600080fd5b6112f283611223565b946020939093013593505050565b60006020828403121561131257600080fd5b5035919050565b6000806000806080858703121561132f57600080fd5b8435935061133f60208601611223565b925061134d60408601611223565b9396929550929360600135925050565b60008060006060848603121561137257600080fd5b833592506112c660208501611223565b600060208083528351808285015260005b818110156113af57858101830151858201604001528201611393565b818111156113c1576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b6000821982111561140857611408611478565b500190565b60008282101561141f5761141f611478565b500390565b600181811c9082168061143857607f821691505b60208210811415611472577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220b73f677bbc2f71e7abc1c0f41f4b9f56570f3d0a264f0f42c56a2a021eca5de464736f6c63430008060033a26469706673582212204a6490d4bb8474516b98e10c45346c502da801f2ee96e040234b1a1ede12821864736f6c63430008060033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620001315760003560e01c80638b79543c11620000c0578063ad007d63116200008b578063ceddd3e4116200006e578063ceddd3e41462000335578063ea78803f146200034c578063ff0186c5146200038557600080fd5b8063ad007d6314620002e5578063c41c2f24146200030d57600080fd5b80638b79543c1462000278578063906ebd0f14620002a0578063a7f2a70b14620002b7578063ac689bcd14620002ce57600080fd5b806357e4c778116200010157806357e4c77814620001d45780636607955d146200021157806375b0d9cd146200022a5780637b4d8e2c146200024157600080fd5b8062fdd58e14620001365780631412884f1462000160578063176309b714620001835780635287af3714620001a6575b600080fd5b6200014d6200014736600462001d01565b6200039c565b6040519081526020015b60405180910390f35b6200014d6200017136600462001e44565b60026020526000908152604090205481565b6200014d6200019436600462001e24565b60016020526000908152604090205481565b6200014d620001b736600462001d01565b600360209081526000928352604080842090915290825290205481565b620001eb620001e536600462001eab565b6200049e565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200162000157565b620002286200022236600462001d7d565b6200094d565b005b6200014d6200023b36600462001e44565b62000bb2565b620002676200025236600462001e44565b60046020526000908152604090205460ff1681565b604051901515815260200162000157565b620001eb7f000000000000000000000000000000000000000000000000000000000000000081565b62000228620002b136600462001db5565b62000ca0565b620001eb620002c836600462001ef2565b620010fc565b62000228620002df36600462001d30565b620013cf565b620001eb7f000000000000000000000000000000000000000000000000000000000000000081565b620001eb7f000000000000000000000000000000000000000000000000000000000000000081565b620002286200034636600462001db5565b620015ab565b620001eb6200035d36600462001e44565b60006020819052908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b620002286200039636600462001e78565b620018bf565b73ffffffffffffffffffffffffffffffffffffffff80831660009081526003602090815260408083208584528252808320549183905290912054909116801562000497576040517efdd58e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301526024820185905282169062fdd58e9060440160206040518083038186803b1580156200044d57600080fd5b505afa15801562000462573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000488919062001e5e565b6200049490836200206b565b91505b5092915050565b6040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018490526000908490339073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa9060240160206040518083038186803b1580156200052c57600080fd5b505afa15801562000541573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000567919062001cda565b73ffffffffffffffffffffffffffffffffffffffff1614620005b5576040517fab7f741400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8416158015620005e8575060008581526004602052604090205460ff165b1562000620576040517fd4ae123800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8416600090815260016020526040902054156200067e576040517f1379a84600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8416158015906200072957508373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015620006e657600080fd5b505afa158015620006fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000721919062001f73565b60ff16601214155b1562000761576040517fadc38c9400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000858152602081905260409020805473ffffffffffffffffffffffffffffffffffffffff8681167fffffffffffffffffffffffff00000000000000000000000000000000000000008316811790935516925015620007e35773ffffffffffffffffffffffffffffffffffffffff841660009081526001602052604090208590555b73ffffffffffffffffffffffffffffffffffffffff821615620008275773ffffffffffffffffffffffffffffffffffffffff82166000908152600160205260408120555b73ffffffffffffffffffffffffffffffffffffffff83161580159062000862575073ffffffffffffffffffffffffffffffffffffffff821615155b15620008ec576040517ff2fde38b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015283169063f2fde38b90602401600060405180830381600087803b158015620008d257600080fd5b505af1158015620008e7573d6000803e3d6000fd5b505050505b6040805173ffffffffffffffffffffffffffffffffffffffff8581168252336020830152808516929087169188917f53b937570201bb723ab1530f41c21f62fba8df64afef862cb0a6f4eccc3094dc910160405180910390a4509392505050565b8282600b6200095e83838362001a67565b60008581526020819052604090205473ffffffffffffffffffffffffffffffffffffffff1680620009bb576040517f73c463ce00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff871660009081526003602090815260408083208984529091529020548581101562000a27576040517f83fc8b2d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff881660009081526003602090815260408083208a845290915290205462000a6590879062002086565b73ffffffffffffffffffffffffffffffffffffffff891660009081526003602090815260408083208b845282528083209390935560029052205462000aac90879062002086565b6000888152600260205260409081902091909155517f836a10400000000000000000000000000000000000000000000000000000000081526004810188905273ffffffffffffffffffffffffffffffffffffffff89811660248301526044820188905283169063836a104090606401600060405180830381600087803b15801562000b3657600080fd5b505af115801562000b4b573d6000803e3d6000fd5b505060408051848152602081018a9052338183015290518a935073ffffffffffffffffffffffffffffffffffffffff8c1692507fe718784128df3c3d45fbd6519133fee450494f7cdb2b53830a5087cd47f980829181900360600190a35050505050505050565b600081815260026020908152604080832054918390529091205473ffffffffffffffffffffffffffffffffffffffff16801562000c9a576040517fbd85b0390000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff82169063bd85b0399060240160206040518083038186803b15801562000c5057600080fd5b505afa15801562000c65573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c8b919062001e5e565b62000c9790836200206b565b91505b50919050565b6040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018490528390339073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa9060240160206040518083038186803b15801562000d2b57600080fd5b505afa15801562000d40573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d66919062001cda565b73ffffffffffffffffffffffffffffffffffffffff161462000db4576040517fab7f741400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000848152602081815260408083205473ffffffffffffffffffffffffffffffffffffffff89811685526003845282852089865290935290832054911691821562000ea7576040517efdd58e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89811660048301526024820189905284169062fdd58e9060440160206040518083038186803b15801562000e6657600080fd5b505afa15801562000e7b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ea1919062001e5e565b62000eaa565b60005b905062000eb882826200206b565b86111562000ef2576040517fe793143800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008162000f035750600062000f42565b851562000f235786821062000f19578662000f1b565b815b905062000f42565b86831062000f3357600062000f3f565b62000f3f838862002086565b90505b600062000f50828962002086565b9050801562000fee5773ffffffffffffffffffffffffffffffffffffffff8a1660009081526003602090815260408083208c845290915290205462000f9790829062002086565b73ffffffffffffffffffffffffffffffffffffffff8b1660009081526003602090815260408083208d845282528083209390935560029052205462000fde90829062002086565b60008a8152600260205260409020555b811562001087576040517f9eea5f66000000000000000000000000000000000000000000000000000000008152600481018a905273ffffffffffffffffffffffffffffffffffffffff8b8116602483015260448201849052861690639eea5f6690606401600060405180830381600087803b1580156200106d57600080fd5b505af115801562001082573d6000803e3d6000fd5b505050505b60408051898152602081018690529081018490528715156060820152336080820152899073ffffffffffffffffffffffffffffffffffffffff8c16907fbe100da6adaa492f7ba1b0de916ae2606126ec7b044d7aa8ec74971a607ceecd9060a00160405180910390a350505050505050505050565b6040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018690526000908690339073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa9060240160206040518083038186803b1580156200118a57600080fd5b505afa1580156200119f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011c5919062001cda565b73ffffffffffffffffffffffffffffffffffffffff161462001213576040517fab7f741400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b846200124b576040517f92bf449d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8262001283576040517f571431a700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008781526020819052604090205473ffffffffffffffffffffffffffffffffffffffff1615620012e0576040517fa54630ac00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85858585604051620012f29062001c80565b62001301949392919062001fe1565b604051809103906000f0801580156200131e573d6000803e3d6000fd5b5060008881526020818152604080832080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86169081179091558084526001909252918290208a905590519193509088907f1b1705bef26552c8f314c5eb80e9c84f02876c2f7f30a7f9ad5cafd17d5fa6da90620013bd908a908a908a908a90339062002017565b60405180910390a35095945050505050565b8383600c620013e083838362001a67565b73ffffffffffffffffffffffffffffffffffffffff85166200142e576040517fc6587bab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff87166000908152600360209081526040808320898452909152902054808511156200149a576040517f83fc8b2d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff881660009081526003602090815260408083208a8452909152902054620014d890869062002086565b73ffffffffffffffffffffffffffffffffffffffff808a1660009081526003602081815260408084208d8552825280842095909555928a16825282528281208a825290915220546200152c9086906200206b565b73ffffffffffffffffffffffffffffffffffffffff87811660008181526003602090815260408083208d8452825291829020949094558051898152339481019490945290928a928c16917fae47e55abe3902569528abe4272b889079230a248aec0659a2939a90354982c6910160405180910390a45050505050505050565b6040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018490528390339073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa9060240160206040518083038186803b1580156200163657600080fd5b505afa1580156200164b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001671919062001cda565b73ffffffffffffffffffffffffffffffffffffffff1614620016bf576040517fab7f741400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008481526020818152604080832054600490925282205473ffffffffffffffffffffffffffffffffffffffff909116919060ff1680620016fd5750835b80156200171f575073ffffffffffffffffffffffffffffffffffffffff821615155b90508015620017bf576040517f836a10400000000000000000000000000000000000000000000000000000000081526004810187905273ffffffffffffffffffffffffffffffffffffffff88811660248301526044820187905283169063836a104090606401600060405180830381600087803b158015620017a057600080fd5b505af1158015620017b5573d6000803e3d6000fd5b5050505062001854565b73ffffffffffffffffffffffffffffffffffffffff87166000908152600360209081526040808320898452909152902054620017fd9086906200206b565b73ffffffffffffffffffffffffffffffffffffffff881660009081526003602090815260408083208a8452825280832093909355600290522054620018449086906200206b565b6000878152600260205260409020555b604080518681528215156020820152851515818301523360608201529051879173ffffffffffffffffffffffffffffffffffffffff8a16917f5dd3ead325af435e56bc762b40de54c96de6071938d18a26414245807591d86f9181900360800190a350505050505050565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018390527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b1580156200194657600080fd5b505afa1580156200195b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001981919062001cda565b82600d6200199183838362001a67565b60008581526020819052604090205473ffffffffffffffffffffffffffffffffffffffff1680620019ee576040517f73c463ce00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008681526004602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016881515908117909155915133815288917f91c234a3a3ebdc00c9bbd80f24661ca100d784b6d9f53923b3a693344719e08c910160405180910390a3505050505050565b3373ffffffffffffffffffffffffffffffffffffffff84161480159062001b6257506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801562001b2557600080fd5b505afa15801562001b3a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001b60919062001e04565b155b801562001c4357506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801562001c0657600080fd5b505afa15801562001c1b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001c41919062001e04565b155b1562001c7b576040517f075fd2b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b6117e5806200210583390190565b60008083601f84011262001ca157600080fd5b50813567ffffffffffffffff81111562001cba57600080fd5b60208301915083602082850101111562001cd357600080fd5b9250929050565b60006020828403121562001ced57600080fd5b815162001cfa81620020cf565b9392505050565b6000806040838503121562001d1557600080fd5b823562001d2281620020cf565b946020939093013593505050565b6000806000806080858703121562001d4757600080fd5b843562001d5481620020cf565b935060208501359250604085013562001d6d81620020cf565b9396929550929360600135925050565b60008060006060848603121562001d9357600080fd5b833562001da081620020cf565b95602085013595506040909401359392505050565b6000806000806080858703121562001dcc57600080fd5b843562001dd981620020cf565b93506020850135925060408501359150606085013562001df981620020f5565b939692955090935050565b60006020828403121562001e1757600080fd5b815162001cfa81620020f5565b60006020828403121562001e3757600080fd5b813562001cfa81620020cf565b60006020828403121562001e5757600080fd5b5035919050565b60006020828403121562001e7157600080fd5b5051919050565b6000806040838503121562001e8c57600080fd5b82359150602083013562001ea081620020f5565b809150509250929050565b60008060006060848603121562001ec157600080fd5b83359250602084013562001ed581620020cf565b9150604084013562001ee781620020cf565b809150509250925092565b60008060008060006060868803121562001f0b57600080fd5b85359450602086013567ffffffffffffffff8082111562001f2b57600080fd5b62001f3989838a0162001c8e565b9096509450604088013591508082111562001f5357600080fd5b5062001f628882890162001c8e565b969995985093965092949392505050565b60006020828403121562001f8657600080fd5b815160ff8116811462001cfa57600080fd5b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b60408152600062001ff760408301868862001f98565b82810360208401526200200c81858762001f98565b979650505050505050565b6060815260006200202d60608301878962001f98565b82810360208401526200204281868862001f98565b91505073ffffffffffffffffffffffffffffffffffffffff831660408301529695505050505050565b60008219821115620020815762002081620020a0565b500190565b6000828210156200209b576200209b620020a0565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114620020f257600080fd5b50565b8015158114620020f257600080fdfe60806040523480156200001157600080fd5b50604051620017e5380380620017e583398101604081905262000034916200023b565b8151829082906200004d906003906020850190620000de565b50805162000063906004906020840190620000de565b505050620000806200007a6200008860201b60201c565b6200008c565b5050620002f8565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620000ec90620002a5565b90600052602060002090601f0160209004810192826200011057600085556200015b565b82601f106200012b57805160ff19168380011785556200015b565b828001600101855582156200015b579182015b828111156200015b5782518255916020019190600101906200013e565b50620001699291506200016d565b5090565b5b808211156200016957600081556001016200016e565b600082601f8301126200019657600080fd5b81516001600160401b0380821115620001b357620001b3620002e2565b604051601f8301601f19908116603f01168101908282118183101715620001de57620001de620002e2565b81604052838152602092508683858801011115620001fb57600080fd5b600091505b838210156200021f578582018301518183018401529082019062000200565b83821115620002315760008385830101525b9695505050505050565b600080604083850312156200024f57600080fd5b82516001600160401b03808211156200026757600080fd5b620002758683870162000184565b935060208501519150808211156200028c57600080fd5b506200029b8582860162000184565b9150509250929050565b600181811c90821680620002ba57607f821691505b60208210811415620002dc57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6114dd80620003086000396000f3fe608060405234801561001057600080fd5b50600436106101765760003560e01c8063836a1040116100d8578063a457c2d71161008c578063dd62ed3e11610066578063dd62ed3e1461030b578063f2fde38b14610351578063f8548e361461036457600080fd5b8063a457c2d7146102d2578063a9059cbb146102e5578063bd85b039146102f857600080fd5b80638da5cb5b116100bd5780638da5cb5b1461028f57806395d89b41146102b75780639eea5f66146102bf57600080fd5b8063836a1040146102695780638cb0a5111461027c57600080fd5b806323b872dd1161012f5780633950935111610114578063395093511461021857806370a082311461022b578063715018a61461026157600080fd5b806323b872dd146101f6578063313ce5671461020957600080fd5b8063095ea7b311610160578063095ea7b3146101b657806318160ddd146101d95780631c0f12b6146101e157600080fd5b8062fdd58e1461017b57806306fdde03146101a1575b600080fd5b61018e6101893660046112d6565b610377565b6040519081526020015b60405180910390f35b6101a96103a5565b6040516101989190611382565b6101c96101c43660046112d6565b610437565b6040519015158152602001610198565b60025461018e565b6101f46101ef366004611319565b61044d565b005b6101c961020436600461129a565b61045f565b60405160128152602001610198565b6101c96102263660046112d6565b61056f565b61018e61023936600461124c565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6101f46105b8565b6101f461027736600461135d565b610645565b6101f461028a36600461135d565b6106d5565b60055460405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610198565b6101a96106e5565b6101f46102cd36600461135d565b6106f4565b6101c96102e03660046112d6565b61077f565b6101c96102f33660046112d6565b610857565b61018e610306366004611300565b610864565b61018e610319366004611267565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b6101f461035f36600461124c565b610875565b6101f461037236600461135d565b610902565b73ffffffffffffffffffffffffffffffffffffffff82166000908152602081905260408120545b9392505050565b6060600380546103b490611424565b80601f01602080910402602001604051908101604052809291908181526020018280546103e090611424565b801561042d5780601f106104025761010080835404028352916020019161042d565b820191906000526020600020905b81548152906001019060200180831161041057829003601f168201915b5050505050905090565b600061044433848461090c565b50600192915050565b61045883838361045f565b5050505050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526001602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610559578281101561054c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610559853385840361090c565b610564858585610abf565b506001949350505050565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490916104449185906105b39086906113f5565b61090c565b60055473ffffffffffffffffffffffffffffffffffffffff163314610639576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610543565b6106436000610d72565b565b60055473ffffffffffffffffffffffffffffffffffffffff1633146106c6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610543565b6106d08282610de9565b505050565b6106df8282610437565b50505050565b6060600480546103b490611424565b60055473ffffffffffffffffffffffffffffffffffffffff163314610775576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610543565b6106d08282610f09565b33600090815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915281205482811015610840576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610543565b61084d338585840361090c565b5060019392505050565b6000610444338484610abf565b600061086f60025490565b92915050565b60055473ffffffffffffffffffffffffffffffffffffffff1633146108f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610543565b6108ff816110f6565b50565b6106df8282610857565b73ffffffffffffffffffffffffffffffffffffffff83166109ae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610543565b73ffffffffffffffffffffffffffffffffffffffff8216610a51576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610543565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8316610b62576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610543565b73ffffffffffffffffffffffffffffffffffffffff8216610c05576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610543565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205481811015610cbb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610543565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260208190526040808220858503905591851681529081208054849290610cff9084906113f5565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610d6591815260200190565b60405180910390a36106df565b6005805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b73ffffffffffffffffffffffffffffffffffffffff8216610e66576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610543565b8060026000828254610e7891906113f5565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604081208054839290610eb29084906113f5565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b73ffffffffffffffffffffffffffffffffffffffff8216610fac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610543565b73ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604090205481811015611062576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610543565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260208190526040812083830390556002805484929061109e90849061140d565b909155505060405182815260009073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b60055473ffffffffffffffffffffffffffffffffffffffff163314611177576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610543565b73ffffffffffffffffffffffffffffffffffffffff811661121a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610543565b6108ff81610d72565b803573ffffffffffffffffffffffffffffffffffffffff8116811461124757600080fd5b919050565b60006020828403121561125e57600080fd5b61039e82611223565b6000806040838503121561127a57600080fd5b61128383611223565b915061129160208401611223565b90509250929050565b6000806000606084860312156112af57600080fd5b6112b884611223565b92506112c660208501611223565b9150604084013590509250925092565b600080604083850312156112e957600080fd5b6112f283611223565b946020939093013593505050565b60006020828403121561131257600080fd5b5035919050565b6000806000806080858703121561132f57600080fd5b8435935061133f60208601611223565b925061134d60408601611223565b9396929550929360600135925050565b60008060006060848603121561137257600080fd5b833592506112c660208501611223565b600060208083528351808285015260005b818110156113af57858101830151858201604001528201611393565b818111156113c1576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b6000821982111561140857611408611478565b500190565b60008282101561141f5761141f611478565b500390565b600181811c9082168061143857607f821691505b60208210811415611472577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220b73f677bbc2f71e7abc1c0f41f4b9f56570f3d0a264f0f42c56a2a021eca5de464736f6c63430008060033a26469706673582212204a6490d4bb8474516b98e10c45346c502da801f2ee96e040234b1a1ede12821864736f6c63430008060033",
  "devdoc": {
    "details": "Token balances can be either represented internally or claimed as ERC-20s into wallets. This contract manages these two representations and allows claiming.The total supply of a project's tokens and the balance of each account are calculated in this contract.Each project can bring their own token if they prefer, and swap between tokens at any time.Adheres to: IJBTokenStore: General interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules.Inherits from: JBControllerUtility: Includes convenience functionality for checking if the message sender is the current controller of the project whose data is being manipulated. JBOperatable: Includes convenience functionality for checking a message sender's permissions before executing certain transactions.",
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "params": {
          "_holder": "The token holder to get a balance for.",
          "_projectId": "The project to get the `_holder`s balance of."
        },
        "returns": {
          "balance": "The project token balance of the `_holder"
        }
      },
      "burnFrom(address,uint256,uint256,bool)": {
        "details": "Only a project's current controller can burn its tokens.",
        "params": {
          "_amount": "The amount of tokens to burn.",
          "_holder": "The address that owns the tokens being burned.",
          "_preferClaimedTokens": "A flag indicating whether there's a preference for tokens to burned from the `_holder`s wallet if the project currently has a token contract attached.",
          "_projectId": "The ID of the project to which the burned tokens belong."
        }
      },
      "changeFor(uint256,address,address)": {
        "details": "Only a project's current controller can change its token.This contract must have access to all of the token's `IJBToken` interface functions.Can't change to a token that's currently being used by another project.Changing to the zero address will remove the current token without adding a new one.",
        "params": {
          "_newOwner": "An address to transfer the current token's ownership to. This is optional, but it cannot be done later.",
          "_projectId": "The ID of the project to which the changed token belongs.",
          "_token": "The new token. Send an empty address to remove the project's current token without adding a new one, if claiming tokens isn't currency required by the project"
        },
        "returns": {
          "oldToken": "The token that was removed as the project's token."
        }
      },
      "claimFor(address,uint256,uint256)": {
        "details": "Only a token holder or an operator specified by the token holder can claim its unclaimed tokens.",
        "params": {
          "_amount": "The amount of tokens to claim.",
          "_holder": "The owner of the tokens being claimed.",
          "_projectId": "The ID of the project whose tokens are being claimed."
        }
      },
      "constructor": {
        "params": {
          "_directory": "A contract storing directories of terminals and controllers for each project.",
          "_operatorStore": "A contract storing operator assignments.",
          "_projects": "A contract which mints ERC-721's that represent project ownership and transfers."
        }
      },
      "issueFor(uint256,string,string)": {
        "details": "Deploys a project's ERC-20 token contract.Only a project's current controller can issue its token.",
        "params": {
          "_name": "The ERC-20's name.",
          "_projectId": "The ID of the project being issued tokens.",
          "_symbol": "The ERC-20's symbol."
        },
        "returns": {
          "token": "The token that was issued."
        }
      },
      "mintFor(address,uint256,uint256,bool)": {
        "details": "Only a project's current controller can mint its tokens.",
        "params": {
          "_amount": "The amount of tokens to mint.",
          "_holder": "The address receiving the new tokens.",
          "_preferClaimedTokens": "A flag indicating whether there's a preference for minted tokens to be claimed automatically into the `_holder`s wallet if the project currently has a token contract attached.",
          "_projectId": "The ID of the project to which the tokens belong."
        }
      },
      "shouldRequireClaimingFor(uint256,bool)": {
        "details": "Only a token holder or an operator can require claimed token.",
        "params": {
          "_flag": "A flag indicating whether or not claiming should be required.",
          "_projectId": "The ID of the project being affected."
        }
      },
      "totalSupplyOf(uint256)": {
        "params": {
          "_projectId": "The ID of the project to get the total token supply of."
        },
        "returns": {
          "totalSupply": "The total supply of the project's tokens."
        }
      },
      "transferFrom(address,uint256,address,uint256)": {
        "details": "Only a token holder or an operator can transfer its unclaimed tokens.",
        "params": {
          "_amount": "The amount of tokens to transfer.",
          "_holder": "The address to transfer tokens from.",
          "_projectId": "The ID of the project whose tokens are being transferred.",
          "_recipient": "The recipient of the tokens."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceOf(address,uint256)": {
        "notice": "The total balance of tokens a holder has for a specified project, including claimed and unclaimed tokens."
      },
      "burnFrom(address,uint256,uint256,bool)": {
        "notice": "Burns a project's tokens."
      },
      "changeFor(uint256,address,address)": {
        "notice": "Swap the current project's token for another, and transfer ownership of the current token to another address if needed."
      },
      "claimFor(address,uint256,uint256)": {
        "notice": "Claims internally accounted for tokens into a holder's wallet."
      },
      "directory()": {
        "notice": " The directory of terminals and controllers for projects."
      },
      "issueFor(uint256,string,string)": {
        "notice": "Issues a project's ERC-20 tokens that'll be used when claiming tokens."
      },
      "mintFor(address,uint256,uint256,bool)": {
        "notice": "Mint new project tokens."
      },
      "operatorStore()": {
        "notice": " A contract storing operator assignments."
      },
      "projectOf(address)": {
        "notice": "The ID of the project that each token belongs to. _token The token to check the project association of."
      },
      "projects()": {
        "notice": "The Projects contract which mints ERC-721's that represent project ownership and transfers."
      },
      "requireClaimFor(uint256)": {
        "notice": "A flag indicating if tokens are required to be issued as claimed for a particular project. _projectId The ID of the project to which the requirement applies."
      },
      "shouldRequireClaimingFor(uint256,bool)": {
        "notice": "Allows a project to force all future mints of its tokens to be claimed into the holder's wallet, or revoke the flag if it's already set."
      },
      "tokenOf(uint256)": {
        "notice": "Each project's attached token contract. _projectId The ID of the project to which the token belongs."
      },
      "totalSupplyOf(uint256)": {
        "notice": "The total supply of tokens for each project, including claimed and unclaimed tokens."
      },
      "transferFrom(address,uint256,address,uint256)": {
        "notice": "Allows a holder to transfer unclaimed tokens to another account."
      },
      "unclaimedBalanceOf(address,uint256)": {
        "notice": "Each holder's balance of unclaimed tokens for each project. _holder The holder of balance. _projectId The ID of the project to which the token belongs."
      },
      "unclaimedTotalSupplyOf(uint256)": {
        "notice": "The total supply of unclaimed tokens for each project. _projectId The ID of the project to which the token belongs."
      }
    },
    "notice": "Manage token minting, burning, and account balances.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11618,
        "contract": "contracts/JBTokenStore.sol:JBTokenStore",
        "label": "tokenOf",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_contract(IJBToken)16465)"
      },
      {
        "astId": 11625,
        "contract": "contracts/JBTokenStore.sol:JBTokenStore",
        "label": "projectOf",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_contract(IJBToken)16465,t_uint256)"
      },
      {
        "astId": 11631,
        "contract": "contracts/JBTokenStore.sol:JBTokenStore",
        "label": "unclaimedTotalSupplyOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 11639,
        "contract": "contracts/JBTokenStore.sol:JBTokenStore",
        "label": "unclaimedBalanceOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 11645,
        "contract": "contracts/JBTokenStore.sol:JBTokenStore",
        "label": "requireClaimFor",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IJBToken)16465": {
        "encoding": "inplace",
        "label": "contract IJBToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_contract(IJBToken)16465,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IJBToken)16465",
        "label": "mapping(contract IJBToken => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_contract(IJBToken)16465)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract IJBToken)",
        "numberOfBytes": "32",
        "value": "t_contract(IJBToken)16465"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}